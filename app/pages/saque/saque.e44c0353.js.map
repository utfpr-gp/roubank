{"mappings":"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","sources":["node_modules/alertifyjs/build/alertify.js"],"sourcesContent":["/**\r\n * alertifyjs 1.13.1 http://alertifyjs.com\r\n * AlertifyJS is a javascript framework for developing pretty browser dialogs and notifications.\r\n * Copyright 2019 Mohammad Younes <Mohammad@alertifyjs.com> (http://alertifyjs.com) \r\n * Licensed under GPL 3 <https://opensource.org/licenses/gpl-3.0>*/\r\n( function ( window ) {\r\n    'use strict';\r\n    var NOT_DISABLED_NOT_RESET = ':not(:disabled):not(.ajs-reset)';\r\n    /**\r\n     * Keys enum\r\n     * @type {Object}\r\n     */\r\n    var keys = {\r\n        ENTER: 13,\r\n        ESC: 27,\r\n        F1: 112,\r\n        F12: 123,\r\n        LEFT: 37,\r\n        RIGHT: 39,\r\n        TAB: 9\r\n    };\r\n    /**\r\n     * Default options \r\n     * @type {Object}\r\n     */\r\n    var defaults = {\r\n        autoReset:true,\r\n        basic:false,\r\n        closable:true,\r\n        closableByDimmer:true,\r\n        invokeOnCloseOff:false,\r\n        frameless:false,\r\n        defaultFocusOff:false,\r\n        maintainFocus:true, //global default not per instance, applies to all dialogs\r\n        maximizable:true,\r\n        modal:true,\r\n        movable:true,\r\n        moveBounded:false,\r\n        overflow:true,\r\n        padding: true,\r\n        pinnable:true,\r\n        pinned:true,\r\n        preventBodyShift:false, //global default not per instance, applies to all dialogs\r\n        resizable:true,\r\n        startMaximized:false,\r\n        transition:'pulse',\r\n        transitionOff:false,\r\n        tabbable:['button', '[href]', 'input', 'select', 'textarea', '[tabindex]:not([tabindex^=\"-\"])'+NOT_DISABLED_NOT_RESET].join(NOT_DISABLED_NOT_RESET+','),//global\r\n        notifier:{\r\n            delay:5,\r\n            position:'bottom-right',\r\n            closeButton:false,\r\n            classes: {\r\n                base: 'alertify-notifier',\r\n                prefix:'ajs-',\r\n                message: 'ajs-message',\r\n                top: 'ajs-top',\r\n                right: 'ajs-right',\r\n                bottom: 'ajs-bottom',\r\n                left: 'ajs-left',\r\n                center: 'ajs-center',\r\n                visible: 'ajs-visible',\r\n                hidden: 'ajs-hidden',\r\n                close: 'ajs-close'\r\n            }\r\n        },\r\n        glossary:{\r\n            title:'AlertifyJS',\r\n            ok: 'OK',\r\n            cancel: 'Cancel',\r\n            acccpt: 'Accept',\r\n            deny: 'Deny',\r\n            confirm: 'Confirm',\r\n            decline: 'Decline',\r\n            close: 'Close',\r\n            maximize: 'Maximize',\r\n            restore: 'Restore',\r\n        },\r\n        theme:{\r\n            input:'ajs-input',\r\n            ok:'ajs-ok',\r\n            cancel:'ajs-cancel',\r\n        },\r\n        hooks:{\r\n            preinit:function(){},\r\n            postinit:function(){}\r\n        }\r\n    };\r\n    \r\n    //holds open dialogs instances\r\n    var openDialogs = [];\r\n\r\n    /**\r\n     * [Helper]  Adds the specified class(es) to the element.\r\n     *\r\n     * @element {node}      The element\r\n     * @className {string}  One or more space-separated classes to be added to the class attribute of the element.\r\n     * \r\n     * @return {undefined}\r\n     */\r\n    function addClass(element,classNames){\r\n        element.className += ' ' + classNames;\r\n    }\r\n    \r\n    /**\r\n     * [Helper]  Removes the specified class(es) from the element.\r\n     *\r\n     * @element {node}      The element\r\n     * @className {string}  One or more space-separated classes to be removed from the class attribute of the element.\r\n     * \r\n     * @return {undefined}\r\n     */\r\n    function removeClass(element, classNames) {\r\n        var original = element.className.split(' ');\r\n        var toBeRemoved = classNames.split(' ');\r\n        for (var x = 0; x < toBeRemoved.length; x += 1) {\r\n            var index = original.indexOf(toBeRemoved[x]);\r\n            if (index > -1){\r\n                original.splice(index,1);\r\n            }\r\n        }\r\n        element.className = original.join(' ');\r\n    }\r\n\r\n    /**\r\n     * [Helper]  Checks if the document is RTL\r\n     *\r\n     * @return {Boolean} True if the document is RTL, false otherwise.\r\n     */\r\n    function isRightToLeft(){\r\n        return window.getComputedStyle(document.body).direction === 'rtl';\r\n    }\r\n    /**\r\n     * [Helper]  Get the document current scrollTop\r\n     *\r\n     * @return {Number} current document scrollTop value\r\n     */\r\n    function getScrollTop(){\r\n        return ((document.documentElement && document.documentElement.scrollTop) || document.body.scrollTop);\r\n    }\r\n\r\n    /**\r\n     * [Helper]  Get the document current scrollLeft\r\n     *\r\n     * @return {Number} current document scrollLeft value\r\n     */\r\n    function getScrollLeft(){\r\n        return ((document.documentElement && document.documentElement.scrollLeft) || document.body.scrollLeft);\r\n    }\r\n\r\n    /**\r\n    * Helper: clear contents\r\n    *\r\n    */\r\n    function clearContents(element){\r\n        while (element.lastChild) {\r\n            element.removeChild(element.lastChild);\r\n        }\r\n    }\r\n    /**\r\n     * Extends a given prototype by merging properties from base into sub.\r\n     *\r\n     * @sub {Object} sub The prototype being overwritten.\r\n     * @base {Object} base The prototype being written.\r\n     *\r\n     * @return {Object} The extended prototype.\r\n     */\r\n    function copy(src) {\r\n        if(null === src){\r\n            return src;\r\n        }\r\n        var cpy;\r\n        if(Array.isArray(src)){\r\n            cpy = [];\r\n            for(var x=0;x<src.length;x+=1){\r\n                cpy.push(copy(src[x]));\r\n            }\r\n            return cpy;\r\n        }\r\n      \r\n        if(src instanceof Date){\r\n            return new Date(src.getTime());\r\n        }\r\n      \r\n        if(src instanceof RegExp){\r\n            cpy = new RegExp(src.source);\r\n            cpy.global = src.global;\r\n            cpy.ignoreCase = src.ignoreCase;\r\n            cpy.multiline = src.multiline;\r\n            cpy.lastIndex = src.lastIndex;\r\n            return cpy;\r\n        }\r\n        \r\n        if(typeof src === 'object'){\r\n            cpy = {};\r\n            // copy dialog pototype over definition.\r\n            for (var prop in src) {\r\n                if (src.hasOwnProperty(prop)) {\r\n                    cpy[prop] = copy(src[prop]);\r\n                }\r\n            }\r\n            return cpy;\r\n        }\r\n        return src;\r\n    }\r\n    /**\r\n      * Helper: destruct the dialog\r\n      *\r\n      */\r\n    function destruct(instance, initialize){\r\n        if(instance.elements){\r\n            //delete the dom and it's references.\r\n            var root = instance.elements.root;\r\n            root.parentNode.removeChild(root);\r\n            delete instance.elements;\r\n            //copy back initial settings.\r\n            instance.settings = copy(instance.__settings);\r\n            //re-reference init function.\r\n            instance.__init = initialize;\r\n            //delete __internal variable to allow re-initialization.\r\n            delete instance.__internal;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Test to check if passive event listeners are supported.\r\n     */\r\n    var IsPassiveSupported = false;\r\n    try {\r\n        var options = Object.defineProperty({}, 'passive', {\r\n            get: function () {\r\n                IsPassiveSupported = true;\r\n            }\r\n        });\r\n        window.addEventListener('test', options, options);\r\n        window.removeEventListener('test', options, options);\r\n    } catch (e) {}\r\n\r\n     /**\r\n     * Removes an event listener\r\n     *\r\n     * @param {HTMLElement} el The EventTarget to register the listenr on.\r\n     * @param {string} event The event type to listen for.\r\n     * @param {Function} handler The function to handle the event.\r\n     * @param {boolean} useCapture Specifices if the event to be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree.\r\n     * @param {boolean} passive A Boolean which, if true, indicates that the function specified by listener will never call preventDefault().\r\n     */\r\n    var on = function (el, event, fn, useCapture, passive) {\r\n        el.addEventListener(event, fn, IsPassiveSupported ? { capture: useCapture, passive: passive } : useCapture === true);\r\n    };\r\n\r\n    /**\r\n     * Removes an event listener\r\n     *\r\n     * @param {HTMLElement} el The EventTarget to unregister the listenr from.\r\n     * @param {string} event The event type to remove.\r\n     * @param {Function} fn The event handler to remove.\r\n     * @param {boolean} useCapture Specifices if the event to be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree.\r\n     * @param {boolean} passive A Boolean which, if true, indicates that the function specified by listener will never call preventDefault().\r\n     */\r\n    var off = function (el, event, fn, useCapture, passive) {\r\n        el.removeEventListener(event, fn, IsPassiveSupported ? { capture: useCapture, passive: passive } : useCapture === true);\r\n    };\r\n\r\n    /**\r\n     * Prevent default event from firing\r\n     *\r\n     * @param  {Event} event Event object\r\n     * @return {undefined}\r\n\r\n    function prevent ( event ) {\r\n        if ( event ) {\r\n            if ( event.preventDefault ) {\r\n                event.preventDefault();\r\n            } else {\r\n                event.returnValue = false;\r\n            }\r\n        }\r\n    }\r\n    */\r\n    var transition = (function () {\r\n        var t, type;\r\n        var supported = false;\r\n        var transitions = {\r\n            'animation'        : 'animationend',\r\n            'OAnimation'       : 'oAnimationEnd oanimationend',\r\n            'msAnimation'      : 'MSAnimationEnd',\r\n            'MozAnimation'     : 'animationend',\r\n            'WebkitAnimation'  : 'webkitAnimationEnd'\r\n        };\r\n\r\n        for (t in transitions) {\r\n            if (document.documentElement.style[t] !== undefined) {\r\n                type = transitions[t];\r\n                supported = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return {\r\n            type: type,\r\n            supported: supported\r\n        };\r\n    }());\r\n\r\n    /**\r\n    * Creates event handler delegate that sends the instance as last argument.\r\n    * \r\n    * @return {Function}    a function wrapper which sends the instance as last argument.\r\n    */\r\n    function delegate(context, method) {\r\n        return function () {\r\n            if (arguments.length > 0) {\r\n                var args = [];\r\n                for (var x = 0; x < arguments.length; x += 1) {\r\n                    args.push(arguments[x]);\r\n                }\r\n                args.push(context);\r\n                return method.apply(context, args);\r\n            }\r\n            return method.apply(context, [null, context]);\r\n        };\r\n    }\r\n    /**\r\n    * Helper for creating a dialog close event.\r\n    * \r\n    * @return {object}\r\n    */\r\n    function createCloseEvent(index, button) {\r\n        return {\r\n            index: index,\r\n            button: button,\r\n            cancel: false\r\n        };\r\n    }\r\n    /**\r\n    * Helper for dispatching events.\r\n    *\r\n    * @param  {string} evenType The type of the event to disptach.\r\n    * @param  {object} instance The dialog instance disptaching the event.\r\n    *\r\n    * @return   {any}   The result of the invoked function.\r\n    */\r\n    function dispatchEvent(eventType, instance) {\r\n        if ( typeof instance.get(eventType) === 'function' ) {\r\n            return instance.get(eventType).call(instance);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Super class for all dialogs\r\n     *\r\n     * @return {Object}\t\tbase dialog prototype\r\n     */\r\n    var dialog = (function () {\r\n        var //holds the list of used keys.\r\n            usedKeys = [],\r\n            //dummy variable, used to trigger dom reflow.\r\n            reflow = null,\r\n            //holds body tab index in case it has any.\r\n            tabindex = false,\r\n            //condition for detecting safari\r\n            isSafari = window.navigator.userAgent.indexOf('Safari') > -1 && window.navigator.userAgent.indexOf('Chrome') < 0,\r\n            //dialog building blocks\r\n            templates = {\r\n                dimmer:'<div class=\"ajs-dimmer\"></div>',\r\n                /*tab index required to fire click event before body focus*/\r\n                modal: '<div class=\"ajs-modal\" tabindex=\"0\"></div>',\r\n                dialog: '<div class=\"ajs-dialog\" tabindex=\"0\"></div>',\r\n                reset: '<button class=\"ajs-reset\"></button>',\r\n                commands: '<div class=\"ajs-commands\"><button class=\"ajs-pin\"></button><button class=\"ajs-maximize\"></button><button class=\"ajs-close\"></button></div>',\r\n                header: '<div class=\"ajs-header\"></div>',\r\n                body: '<div class=\"ajs-body\"></div>',\r\n                content: '<div class=\"ajs-content\"></div>',\r\n                footer: '<div class=\"ajs-footer\"></div>',\r\n                buttons: { primary: '<div class=\"ajs-primary ajs-buttons\"></div>', auxiliary: '<div class=\"ajs-auxiliary ajs-buttons\"></div>' },\r\n                button: '<button class=\"ajs-button\"></button>',\r\n                resizeHandle: '<div class=\"ajs-handle\"></div>',\r\n            },\r\n            //common class names\r\n            classes = {\r\n                animationIn: 'ajs-in',\r\n                animationOut: 'ajs-out',\r\n                base: 'alertify',\r\n                basic:'ajs-basic',\r\n                capture: 'ajs-capture',\r\n                closable:'ajs-closable',\r\n                fixed: 'ajs-fixed',\r\n                frameless:'ajs-frameless',\r\n                hidden: 'ajs-hidden',\r\n                maximize: 'ajs-maximize',\r\n                maximized: 'ajs-maximized',\r\n                maximizable:'ajs-maximizable',\r\n                modeless: 'ajs-modeless',\r\n                movable: 'ajs-movable',\r\n                noSelection: 'ajs-no-selection',\r\n                noOverflow: 'ajs-no-overflow',\r\n                noPadding:'ajs-no-padding',\r\n                pin:'ajs-pin',\r\n                pinnable:'ajs-pinnable',\r\n                prefix: 'ajs-',\r\n                resizable: 'ajs-resizable',\r\n                restore: 'ajs-restore',\r\n                shake:'ajs-shake',\r\n                unpinned:'ajs-unpinned',\r\n                noTransition:'ajs-no-transition'\r\n            };\r\n\r\n        /**\r\n         * Helper: initializes the dialog instance\r\n         * \r\n         * @return\t{Number}\tThe total count of currently open modals.\r\n         */\r\n        function initialize(instance){\r\n            \r\n            if(!instance.__internal){\r\n                //invoke preinit global hook\r\n                alertify.defaults.hooks.preinit(instance);\r\n                //no need to expose init after this.\r\n                delete instance.__init;\r\n              \r\n                //keep a copy of initial dialog settings\r\n                if(!instance.__settings){\r\n                    instance.__settings = copy(instance.settings);\r\n                }\r\n                \r\n                //get dialog buttons/focus setup\r\n                var setup;\r\n                if(typeof instance.setup === 'function'){\r\n                    setup = instance.setup();\r\n                    setup.options = setup.options  || {};\r\n                    setup.focus = setup.focus  || {};\r\n                }else{\r\n                    setup = {\r\n                        buttons:[],\r\n                        focus:{\r\n                            element:null,\r\n                            select:false\r\n                        },\r\n                        options:{\r\n                        }\r\n                    };\r\n                }\r\n                \r\n                //initialize hooks object.\r\n                if(typeof instance.hooks !== 'object'){\r\n                    instance.hooks = {};\r\n                }\r\n\r\n                //copy buttons defintion\r\n                var buttonsDefinition = [];\r\n                if(Array.isArray(setup.buttons)){\r\n                    for(var b=0;b<setup.buttons.length;b+=1){\r\n                        var ref  = setup.buttons[b],\r\n                            cpy = {};\r\n                        for (var i in ref) {\r\n                            if (ref.hasOwnProperty(i)) {\r\n                                cpy[i] = ref[i];\r\n                            }\r\n                        }\r\n                        buttonsDefinition.push(cpy);\r\n                    }\r\n                }\r\n\r\n                var internal = instance.__internal = {\r\n                    /**\r\n                     * Flag holding the open state of the dialog\r\n                     * \r\n                     * @type {Boolean}\r\n                     */\r\n                    isOpen:false,\r\n                    /**\r\n                     * Active element is the element that will receive focus after\r\n                     * closing the dialog. It defaults as the body tag, but gets updated\r\n                     * to the last focused element before the dialog was opened.\r\n                     *\r\n                     * @type {Node}\r\n                     */\r\n                    activeElement:document.body,\r\n                    timerIn:undefined,\r\n                    timerOut:undefined,\r\n                    buttons: buttonsDefinition,\r\n                    focus: setup.focus,\r\n                    options: {\r\n                        title: undefined,\r\n                        modal: undefined,\r\n                        basic:undefined,\r\n                        frameless:undefined,\r\n                        defaultFocusOff:undefined,\r\n                        pinned: undefined,\r\n                        movable: undefined,\r\n                        moveBounded:undefined,\r\n                        resizable: undefined,\r\n                        autoReset: undefined,\r\n                        closable: undefined,\r\n                        closableByDimmer: undefined,\r\n                        invokeOnCloseOff:undefined,\r\n                        maximizable: undefined,\r\n                        startMaximized: undefined,\r\n                        pinnable: undefined,\r\n                        transition: undefined,\r\n                        transitionOff: undefined,\r\n                        padding:undefined,\r\n                        overflow:undefined,\r\n                        onshow:undefined,\r\n                        onclosing:undefined,\r\n                        onclose:undefined,\r\n                        onfocus:undefined,\r\n                        onmove:undefined,\r\n                        onmoved:undefined,\r\n                        onresize:undefined,\r\n                        onresized:undefined,\r\n                        onmaximize:undefined,\r\n                        onmaximized:undefined,\r\n                        onrestore:undefined,\r\n                        onrestored:undefined\r\n                    },\r\n                    resetHandler:undefined,\r\n                    beginMoveHandler:undefined,\r\n                    beginResizeHandler:undefined,\r\n                    bringToFrontHandler:undefined,\r\n                    modalClickHandler:undefined,\r\n                    buttonsClickHandler:undefined,\r\n                    commandsClickHandler:undefined,\r\n                    transitionInHandler:undefined,\r\n                    transitionOutHandler:undefined,\r\n                    destroy:undefined\r\n                };\r\n\r\n                var elements = {};\r\n                //root node\r\n                elements.root = document.createElement('div');\r\n                //prevent FOUC in case of async styles loading.\r\n                elements.root.style.display = 'none';\r\n                elements.root.className = classes.base + ' ' + classes.hidden + ' ';\r\n\r\n                elements.root.innerHTML = templates.dimmer + templates.modal;\r\n                \r\n                //dimmer\r\n                elements.dimmer = elements.root.firstChild;\r\n\r\n                //dialog\r\n                elements.modal = elements.root.lastChild;\r\n                elements.modal.innerHTML = templates.dialog;\r\n                elements.dialog = elements.modal.firstChild;\r\n                elements.dialog.innerHTML = templates.reset + templates.commands + templates.header + templates.body + templates.footer + templates.resizeHandle + templates.reset;\r\n\r\n                //reset links\r\n                elements.reset = [];\r\n                elements.reset.push(elements.dialog.firstChild);\r\n                elements.reset.push(elements.dialog.lastChild);\r\n                \r\n                //commands\r\n                elements.commands = {};\r\n                elements.commands.container = elements.reset[0].nextSibling;\r\n                elements.commands.pin = elements.commands.container.firstChild;\r\n                elements.commands.maximize = elements.commands.pin.nextSibling;\r\n                elements.commands.close = elements.commands.maximize.nextSibling;\r\n                \r\n                //header\r\n                elements.header = elements.commands.container.nextSibling;\r\n\r\n                //body\r\n                elements.body = elements.header.nextSibling;\r\n                elements.body.innerHTML = templates.content;\r\n                elements.content = elements.body.firstChild;\r\n\r\n                //footer\r\n                elements.footer = elements.body.nextSibling;\r\n                elements.footer.innerHTML = templates.buttons.auxiliary + templates.buttons.primary;\r\n                \r\n                //resize handle\r\n                elements.resizeHandle = elements.footer.nextSibling;\r\n\r\n                //buttons\r\n                elements.buttons = {};\r\n                elements.buttons.auxiliary = elements.footer.firstChild;\r\n                elements.buttons.primary = elements.buttons.auxiliary.nextSibling;\r\n                elements.buttons.primary.innerHTML = templates.button;\r\n                elements.buttonTemplate = elements.buttons.primary.firstChild;\r\n                //remove button template\r\n                elements.buttons.primary.removeChild(elements.buttonTemplate);\r\n                               \r\n                for(var x=0; x < instance.__internal.buttons.length; x+=1) {\r\n                    var button = instance.__internal.buttons[x];\r\n                    \r\n                    // add to the list of used keys.\r\n                    if(usedKeys.indexOf(button.key) < 0){\r\n                        usedKeys.push(button.key);\r\n                    }\r\n\r\n                    button.element = elements.buttonTemplate.cloneNode();\r\n                    button.element.innerHTML = button.text;\r\n                    if(typeof button.className === 'string' &&  button.className !== ''){\r\n                        addClass(button.element, button.className);\r\n                    }\r\n                    for(var key in button.attrs){\r\n                        if(key !== 'className' && button.attrs.hasOwnProperty(key)){\r\n                            button.element.setAttribute(key, button.attrs[key]);\r\n                        }\r\n                    }\r\n                    if(button.scope === 'auxiliary'){\r\n                        elements.buttons.auxiliary.appendChild(button.element);\r\n                    }else{\r\n                        elements.buttons.primary.appendChild(button.element);\r\n                    }\r\n                }\r\n                //make elements pubic\r\n                instance.elements = elements;\r\n                \r\n                //save event handlers delegates\r\n                internal.resetHandler = delegate(instance, onReset);\r\n                internal.beginMoveHandler = delegate(instance, beginMove);\r\n                internal.beginResizeHandler = delegate(instance, beginResize);\r\n                internal.bringToFrontHandler = delegate(instance, bringToFront);\r\n                internal.modalClickHandler = delegate(instance, modalClickHandler);\r\n                internal.buttonsClickHandler = delegate(instance, buttonsClickHandler);\r\n                internal.commandsClickHandler = delegate(instance, commandsClickHandler);\r\n                internal.transitionInHandler = delegate(instance, handleTransitionInEvent);\r\n                internal.transitionOutHandler = delegate(instance, handleTransitionOutEvent);\r\n\r\n                //settings\r\n                for(var opKey in internal.options){\r\n                    if(setup.options[opKey] !== undefined){\r\n                        // if found in user options\r\n                        instance.set(opKey, setup.options[opKey]);\r\n                    }else if(alertify.defaults.hasOwnProperty(opKey)) {\r\n                        // else if found in defaults options\r\n                        instance.set(opKey, alertify.defaults[opKey]);\r\n                    }else if(opKey === 'title' ) {\r\n                        // else if title key, use alertify.defaults.glossary\r\n                        instance.set(opKey, alertify.defaults.glossary[opKey]);\r\n                    }\r\n                }\r\n\r\n                // allow dom customization\r\n                if(typeof instance.build === 'function'){\r\n                    instance.build();\r\n                }\r\n\r\n                //invoke postinit global hook\r\n                alertify.defaults.hooks.postinit(instance);\r\n            }\r\n\r\n            //add to the end of the DOM tree.\r\n            document.body.appendChild(instance.elements.root);\r\n        }\r\n\r\n        /**\r\n         * Helper: maintains scroll position\r\n         *\r\n         */\r\n        var scrollX, scrollY;\r\n        function saveScrollPosition(){\r\n            scrollX = getScrollLeft();\r\n            scrollY = getScrollTop();\r\n        }\r\n        function restoreScrollPosition(){\r\n            window.scrollTo(scrollX, scrollY);\r\n        }\r\n\r\n        /**\r\n         * Helper: adds/removes no-overflow class from body\r\n         *\r\n         */\r\n        function ensureNoOverflow(){\r\n            var requiresNoOverflow = 0;\r\n            for(var x=0;x<openDialogs.length;x+=1){\r\n                var instance = openDialogs[x];\r\n                if(instance.isModal() || instance.isMaximized()){\r\n                    requiresNoOverflow+=1;\r\n                }\r\n            }\r\n            if(requiresNoOverflow === 0 && document.body.className.indexOf(classes.noOverflow) >= 0){\r\n                //last open modal or last maximized one\r\n                removeClass(document.body, classes.noOverflow);\r\n                preventBodyShift(false);\r\n            }else if(requiresNoOverflow > 0 && document.body.className.indexOf(classes.noOverflow) < 0){\r\n                //first open modal or first maximized one\r\n                preventBodyShift(true);\r\n                addClass(document.body, classes.noOverflow);\r\n            }\r\n        }\r\n        var top = '', topScroll = 0;\r\n        /**\r\n         * Helper: prevents body shift.\r\n         *\r\n         */\r\n        function preventBodyShift(add){\r\n            if(alertify.defaults.preventBodyShift){\r\n                if(add && document.documentElement.scrollHeight > document.documentElement.clientHeight ){//&& openDialogs[openDialogs.length-1].elements.dialog.clientHeight <= document.documentElement.clientHeight){\r\n                    topScroll = scrollY;\r\n                    top = window.getComputedStyle(document.body).top;\r\n                    addClass(document.body, classes.fixed);\r\n                    document.body.style.top = -scrollY + 'px';\r\n                } else if(!add) {\r\n                    scrollY = topScroll;\r\n                    document.body.style.top = top;\r\n                    removeClass(document.body, classes.fixed);\r\n                    restoreScrollPosition();\r\n                }\r\n            }\r\n        }\r\n\t\t\r\n        /**\r\n         * Sets the name of the transition used to show/hide the dialog\r\n         * \r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         */\r\n        function updateTransition(instance, value, oldValue){\r\n            if(typeof oldValue === 'string'){\r\n                removeClass(instance.elements.root,classes.prefix +  oldValue);\r\n            }\r\n            addClass(instance.elements.root, classes.prefix + value);\r\n            reflow = instance.elements.root.offsetWidth;\r\n        }\r\n\r\n        /**\r\n         * Toggles the dialog no transition \r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateTransitionOff(instance){\r\n            if (instance.get('transitionOff')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.noTransition);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.noTransition);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Toggles the dialog display mode\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateDisplayMode(instance){\r\n            if(instance.get('modal')){\r\n\r\n                //make modal\r\n                removeClass(instance.elements.root, classes.modeless);\r\n\r\n                //only if open\r\n                if(instance.isOpen()){\r\n                    unbindModelessEvents(instance);\r\n\r\n                    //in case a pinned modless dialog was made modal while open.\r\n                    updateAbsPositionFix(instance);\r\n\r\n                    ensureNoOverflow();\r\n                }\r\n            }else{\r\n                //make modelss\r\n                addClass(instance.elements.root, classes.modeless);\r\n\r\n                //only if open\r\n                if(instance.isOpen()){\r\n                    bindModelessEvents(instance);\r\n\r\n                    //in case pin/unpin was called while a modal is open\r\n                    updateAbsPositionFix(instance);\r\n\r\n                    ensureNoOverflow();\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Toggles the dialog basic view mode \r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateBasicMode(instance){\r\n            if (instance.get('basic')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.basic);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.basic);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Toggles the dialog frameless view mode \r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateFramelessMode(instance){\r\n            if (instance.get('frameless')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.frameless);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.frameless);\r\n            }\r\n        }\r\n\t\t\r\n        /**\r\n         * Helper: Brings the modeless dialog to front, attached to modeless dialogs.\r\n         *\r\n         * @param {Event} event Focus event\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bringToFront(event, instance){\r\n            \r\n            // Do not bring to front if preceeded by an open modal\r\n            var index = openDialogs.indexOf(instance);\r\n            for(var x=index+1;x<openDialogs.length;x+=1){\r\n                if(openDialogs[x].isModal()){\r\n                    return;\r\n                }\r\n            }\r\n\t\t\t\r\n            // Bring to front by making it the last child.\r\n            if(document.body.lastChild !== instance.elements.root){\r\n                document.body.appendChild(instance.elements.root);\r\n                //also make sure its at the end of the list\r\n                openDialogs.splice(openDialogs.indexOf(instance),1);\r\n                openDialogs.push(instance);\r\n                setFocus(instance);\r\n            }\r\n\t\t\t\r\n            return false;\r\n        }\r\n\t\t\r\n        /**\r\n         * Helper: reflects dialogs options updates\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {String} option The updated option name.\r\n         *\r\n         * @return\t{undefined}\t\r\n         */\r\n        function optionUpdated(instance, option, oldValue, newValue){\r\n            switch(option){\r\n            case 'title':\r\n                instance.setHeader(newValue);\r\n                break;\r\n            case 'modal':\r\n                updateDisplayMode(instance);\r\n                break;\r\n            case 'basic':\r\n                updateBasicMode(instance);\r\n                break;\r\n            case 'frameless':\r\n                updateFramelessMode(instance);\r\n                break;\r\n            case 'pinned':\r\n                updatePinned(instance);\r\n                break;\r\n            case 'closable':\r\n                updateClosable(instance);\r\n                break;\r\n            case 'maximizable':\r\n                updateMaximizable(instance);\r\n                break;\r\n            case 'pinnable':\r\n                updatePinnable(instance);\r\n                break;\r\n            case 'movable':\r\n                updateMovable(instance);\r\n                break;\r\n            case 'resizable':\r\n                updateResizable(instance);\r\n                break;\r\n            case 'padding':\r\n                if(newValue){\r\n                    removeClass(instance.elements.root, classes.noPadding);\r\n                }else if(instance.elements.root.className.indexOf(classes.noPadding) < 0){\r\n                    addClass(instance.elements.root, classes.noPadding);\r\n                }\r\n                break;\r\n            case 'overflow':\r\n                if(newValue){\r\n                    removeClass(instance.elements.root, classes.noOverflow);\r\n                }else if(instance.elements.root.className.indexOf(classes.noOverflow) < 0){\r\n                    addClass(instance.elements.root, classes.noOverflow);\r\n                }\r\n                break;\r\n            case 'transition':\r\n                updateTransition(instance,newValue, oldValue);\r\n                break;\r\n            case 'transitionOff':\r\n                updateTransitionOff(instance);\r\n                break;\r\n            }\r\n\r\n            // internal on option updated event\r\n            if(typeof instance.hooks.onupdate === 'function'){\r\n                instance.hooks.onupdate.call(instance, option, oldValue, newValue);\r\n            }\r\n        }\r\n\t\t\r\n        /**\r\n         * Helper: reflects dialogs options updates\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Object} obj The object to set/get a value on/from.\r\n         * @param {Function} callback The callback function to call if the key was found.\r\n         * @param {String|Object} key A string specifying a propery name or a collection of key value pairs.\r\n         * @param {Object} value Optional, the value associated with the key (in case it was a string).\r\n         * @param {String} option The updated option name.\r\n         *\r\n         * @return\t{Object} result object \r\n         *\tThe result objects has an 'op' property, indicating of this is a SET or GET operation.\r\n         *\t\tGET: \r\n         *\t\t- found: a flag indicating if the key was found or not.\r\n         *\t\t- value: the property value.\r\n         *\t\tSET:\r\n         *\t\t- items: a list of key value pairs of the properties being set.\r\n         *\t\t\t\teach contains:\r\n         *\t\t\t\t\t- found: a flag indicating if the key was found or not.\r\n         *\t\t\t\t\t- key: the property key.\r\n         *\t\t\t\t\t- value: the property value.\r\n         */\r\n        function update(instance, obj, callback, key, value){\r\n            var result = {op:undefined, items: [] };\r\n            if(typeof value === 'undefined' && typeof key === 'string') {\r\n                //get\r\n                result.op = 'get';\r\n                if(obj.hasOwnProperty(key)){\r\n                    result.found = true;\r\n                    result.value = obj[key];\r\n                }else{\r\n                    result.found = false;\r\n                    result.value = undefined;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                var old;\r\n                //set\r\n                result.op = 'set';\r\n                if(typeof key === 'object'){\r\n                    //set multiple\r\n                    var args = key;\r\n                    for (var prop in args) {\r\n                        if (obj.hasOwnProperty(prop)) {\r\n                            if(obj[prop] !== args[prop]){\r\n                                old = obj[prop];\r\n                                obj[prop] = args[prop];\r\n                                callback.call(instance,prop, old, args[prop]);\r\n                            }\r\n                            result.items.push({ 'key': prop, 'value': args[prop], 'found':true});\r\n                        }else{\r\n                            result.items.push({ 'key': prop, 'value': args[prop], 'found':false});\r\n                        }\r\n                    }\r\n                } else if (typeof key === 'string'){\r\n                    //set single\r\n                    if (obj.hasOwnProperty(key)) {\r\n                        if(obj[key] !== value){\r\n                            old  = obj[key];\r\n                            obj[key] = value;\r\n                            callback.call(instance,key, old, value);\r\n                        }\r\n                        result.items.push({'key': key, 'value': value , 'found':true});\r\n\r\n                    }else{\r\n                        result.items.push({'key': key, 'value': value , 'found':false});\r\n                    }\r\n                } else {\r\n                    //invalid params\r\n                    throw new Error('args must be a string or object');\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n\r\n        /**\r\n         * Triggers a close event.\r\n         *\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function triggerClose(instance) {\r\n            var found;\r\n            triggerCallback(instance, function (button) {\r\n                return found = instance.get('invokeOnCloseOff') !== true && (button.invokeOnClose === true);\r\n            });\r\n            //none of the buttons registered as onclose callback\r\n            //close the dialog\r\n            if (!found && instance.isOpen()) {\r\n                instance.close();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Dialogs commands event handler, attached to the dialog commands element.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function commandsClickHandler(event, instance) {\r\n            var target = event.srcElement || event.target;\r\n            switch (target) {\r\n            case instance.elements.commands.pin:\r\n                if (!instance.isPinned()) {\r\n                    pin(instance);\r\n                } else {\r\n                    unpin(instance);\r\n                }\r\n                break;\r\n            case instance.elements.commands.maximize:\r\n                if (!instance.isMaximized()) {\r\n                    maximize(instance);\r\n                } else {\r\n                    restore(instance);\r\n                }\r\n                break;\r\n            case instance.elements.commands.close:\r\n                triggerClose(instance);\r\n                break;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Helper: pins the modeless dialog.\r\n         *\r\n         * @param {Object} instance\tThe dialog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function pin(instance) {\r\n            //pin the dialog\r\n            instance.set('pinned', true);\r\n        }\r\n\r\n        /**\r\n         * Helper: unpins the modeless dialog.\r\n         *\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function unpin(instance) {\r\n            //unpin the dialog \r\n            instance.set('pinned', false);\r\n        }\r\n\r\n\r\n        /**\r\n         * Helper: enlarges the dialog to fill the entire screen.\r\n         *\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function maximize(instance) {\r\n            // allow custom `onmaximize` method\r\n            dispatchEvent('onmaximize', instance);\r\n            //maximize the dialog \r\n            addClass(instance.elements.root, classes.maximized);\r\n            if (instance.isOpen()) {\r\n                ensureNoOverflow();\r\n            }\r\n            // allow custom `onmaximized` method\r\n            dispatchEvent('onmaximized', instance);\r\n        }\r\n\r\n        /**\r\n         * Helper: returns the dialog to its former size.\r\n         *\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function restore(instance) {\r\n            // allow custom `onrestore` method\r\n            dispatchEvent('onrestore', instance);\r\n            //maximize the dialog \r\n            removeClass(instance.elements.root, classes.maximized);\r\n            if (instance.isOpen()) {\r\n                ensureNoOverflow();\r\n            }\r\n            // allow custom `onrestored` method\r\n            dispatchEvent('onrestored', instance);\r\n        }\r\n\r\n        /**\r\n         * Show or hide the maximize box.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updatePinnable(instance) {\r\n            if (instance.get('pinnable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.pinnable);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.pinnable);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Helper: Fixes the absolutly positioned modal div position.\r\n         *\r\n         * @param {Object} instance The dialog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function addAbsPositionFix(instance) {\r\n            var scrollLeft = getScrollLeft();\r\n            instance.elements.modal.style.marginTop = getScrollTop() + 'px';\r\n            instance.elements.modal.style.marginLeft = scrollLeft + 'px';\r\n            instance.elements.modal.style.marginRight = (-scrollLeft) + 'px';\r\n        }\r\n\r\n        /**\r\n         * Helper: Removes the absolutly positioned modal div position fix.\r\n         *\r\n         * @param {Object} instance The dialog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function removeAbsPositionFix(instance) {\r\n            var marginTop = parseInt(instance.elements.modal.style.marginTop, 10);\r\n            var marginLeft = parseInt(instance.elements.modal.style.marginLeft, 10);\r\n            instance.elements.modal.style.marginTop = '';\r\n            instance.elements.modal.style.marginLeft = '';\r\n            instance.elements.modal.style.marginRight = '';\r\n\r\n            if (instance.isOpen()) {\r\n                var top = 0,\r\n                    left = 0\r\n                ;\r\n                if (instance.elements.dialog.style.top !== '') {\r\n                    top = parseInt(instance.elements.dialog.style.top, 10);\r\n                }\r\n                instance.elements.dialog.style.top = (top + (marginTop - getScrollTop())) + 'px';\r\n\r\n                if (instance.elements.dialog.style.left !== '') {\r\n                    left = parseInt(instance.elements.dialog.style.left, 10);\r\n                }\r\n                instance.elements.dialog.style.left = (left + (marginLeft - getScrollLeft())) + 'px';\r\n            }\r\n        }\r\n        /**\r\n         * Helper: Adds/Removes the absolutly positioned modal div position fix based on its pinned setting.\r\n         *\r\n         * @param {Object} instance The dialog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateAbsPositionFix(instance) {\r\n            // if modeless and unpinned add fix\r\n            if (!instance.get('modal') && !instance.get('pinned')) {\r\n                addAbsPositionFix(instance);\r\n            } else {\r\n                removeAbsPositionFix(instance);\r\n            }\r\n        }\r\n        /**\r\n         * Toggles the dialog position lock | modeless only.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to make it modal, false otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updatePinned(instance) {\r\n            if (instance.get('pinned')) {\r\n                removeClass(instance.elements.root, classes.unpinned);\r\n                if (instance.isOpen()) {\r\n                    removeAbsPositionFix(instance);\r\n                }\r\n            } else {\r\n                addClass(instance.elements.root, classes.unpinned);\r\n                if (instance.isOpen() && !instance.isModal()) {\r\n                    addAbsPositionFix(instance);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Show or hide the maximize box.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateMaximizable(instance) {\r\n            if (instance.get('maximizable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.maximizable);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.maximizable);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Show or hide the close box.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateClosable(instance) {\r\n            if (instance.get('closable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.closable);\r\n                bindClosableEvents(instance);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.closable);\r\n                unbindClosableEvents(instance);\r\n            }\r\n        }\r\n\r\n        \r\n        var cancelClick = false,// flag to cancel click event if already handled by end resize event (the mousedown, mousemove, mouseup sequence fires a click event.).\r\n            modalClickHandlerTS=0 // stores last click timestamp to prevent executing the handler twice on double click.\r\n            ;\r\n\r\n        /**\r\n         * Helper: closes the modal dialog when clicking the modal\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function modalClickHandler(event, instance) {\r\n            if(event.timeStamp - modalClickHandlerTS > 200 && (modalClickHandlerTS = event.timeStamp) && !cancelClick){\r\n                var target = event.srcElement || event.target;\r\n                if (instance.get('closableByDimmer') === true && target === instance.elements.modal) {\r\n                    triggerClose(instance);\r\n                }\r\n            }\r\n            cancelClick = false;\r\n        }\r\n\r\n        // stores last call timestamp to prevent triggering the callback twice.\r\n        var callbackTS = 0;\r\n        // flag to cancel keyup event if already handled by click event (pressing Enter on a focusted button).\r\n        var cancelKeyup = false;\r\n        /** \r\n         * Helper: triggers a button callback\r\n         *\r\n         * @param {Object}\t\tThe dilog instance.\r\n         * @param {Function}\tCallback to check which button triggered the event.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function triggerCallback(instance, check) {\r\n            if(Date.now() - callbackTS > 200 && (callbackTS = Date.now())){\r\n                for (var idx = 0; idx < instance.__internal.buttons.length; idx += 1) {\r\n                    var button = instance.__internal.buttons[idx];\r\n                    if (!button.element.disabled && check(button)) {\r\n                        var closeEvent = createCloseEvent(idx, button);\r\n                        if (typeof instance.callback === 'function') {\r\n                            instance.callback.apply(instance, [closeEvent]);\r\n                        }\r\n                        //close the dialog only if not canceled.\r\n                        if (closeEvent.cancel === false) {\r\n                            instance.close();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Clicks event handler, attached to the dialog footer.\r\n         *\r\n         * @param {Event}\t\tDOM event object.\r\n         * @param {Object}\t\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function buttonsClickHandler(event, instance) {\r\n            var target = event.srcElement || event.target;\r\n            triggerCallback(instance, function (button) {\r\n                // if this button caused the click, cancel keyup event\r\n                return button.element === target && (cancelKeyup = true);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Keyup event handler, attached to the document.body\r\n         *\r\n         * @param {Event}\t\tDOM event object.\r\n         * @param {Object}\t\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function keyupHandler(event) {\r\n            //hitting enter while button has focus will trigger keyup too.\r\n            //ignore if handled by clickHandler\r\n            if (cancelKeyup) {\r\n                cancelKeyup = false;\r\n                return;\r\n            }\r\n            var instance = openDialogs[openDialogs.length - 1];\r\n            var keyCode = event.keyCode;\r\n            if (instance.__internal.buttons.length === 0 && keyCode === keys.ESC && instance.get('closable') === true) {\r\n                triggerClose(instance);\r\n                return false;\r\n            }else if (usedKeys.indexOf(keyCode) > -1) {\r\n                triggerCallback(instance, function (button) {\r\n                    return button.key === keyCode;\r\n                });\r\n                return false;\r\n            }\r\n        }\r\n        /**\r\n        * Keydown event handler, attached to the document.body\r\n        *\r\n        * @param {Event}\t\tDOM event object.\r\n        * @param {Object}\t\tThe dilog instance.\r\n        * \r\n        * @return {undefined}\r\n        */\r\n        function keydownHandler(event) {\r\n            var instance = openDialogs[openDialogs.length - 1];\r\n            var keyCode = event.keyCode;\r\n            if (keyCode === keys.LEFT || keyCode === keys.RIGHT) {\r\n                var buttons = instance.__internal.buttons;\r\n                for (var x = 0; x < buttons.length; x += 1) {\r\n                    if (document.activeElement === buttons[x].element) {\r\n                        switch (keyCode) {\r\n                        case keys.LEFT:\r\n                            buttons[(x || buttons.length) - 1].element.focus();\r\n                            return;\r\n                        case keys.RIGHT:\r\n                            buttons[(x + 1) % buttons.length].element.focus();\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n            }else if (keyCode < keys.F12 + 1 && keyCode > keys.F1 - 1 && usedKeys.indexOf(keyCode) > -1) {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                triggerCallback(instance, function (button) {\r\n                    return button.key === keyCode;\r\n                });\r\n                return false;\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Sets focus to proper dialog element\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Node} [resetTarget=undefined] DOM element to reset focus to.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function setFocus(instance, resetTarget) {\r\n            // reset target has already been determined.\r\n            if (resetTarget) {\r\n                resetTarget.focus();\r\n            } else {\r\n                // current instance focus settings\r\n                var focus = instance.__internal.focus;\r\n                // the focus element.\r\n                var element = focus.element;\r\n\r\n                switch (typeof focus.element) {\r\n                // a number means a button index\r\n                case 'number':\r\n                    if (instance.__internal.buttons.length > focus.element) {\r\n                        //in basic view, skip focusing the buttons.\r\n                        if (instance.get('basic') === true) {\r\n                            element = instance.elements.reset[0];\r\n                        } else {\r\n                            element = instance.__internal.buttons[focus.element].element;\r\n                        }\r\n                    }\r\n                    break;\r\n                // a string means querySelector to select from dialog body contents.\r\n                case 'string':\r\n                    element = instance.elements.body.querySelector(focus.element);\r\n                    break;\r\n                // a function should return the focus element.\r\n                case 'function':\r\n                    element = focus.element.call(instance);\r\n                    break;\r\n                }\r\n\r\n                // if no focus element, default to first reset element.\r\n                if (instance.get('defaultFocusOff') === true || ((typeof element === 'undefined' || element === null) && instance.__internal.buttons.length === 0)) {\r\n                    element = instance.elements.reset[0];\r\n                }\r\n                // focus\r\n                if (element && element.focus) {\r\n                    element.focus();\r\n                    // if selectable\r\n                    if (focus.select && element.select) {\r\n                        element.select();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Focus event handler, attached to document.body and dialogs own reset links.\r\n         * handles the focus for modal dialogs only.\r\n         *\r\n         * @param {Event} event DOM focus event object.\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function onReset(event, instance) {\r\n\r\n            // should work on last modal if triggered from document.body \r\n            if (!instance) {\r\n                for (var x = openDialogs.length - 1; x > -1; x -= 1) {\r\n                    if (openDialogs[x].isModal()) {\r\n                        instance = openDialogs[x];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(instance) {\r\n                // if modal\r\n                if (instance.isModal()) {\r\n                    // determine reset target to enable forward/backward tab cycle.\r\n                    var firstReset = instance.elements.reset[0],\r\n                        lastReset = instance.elements.reset[1],\r\n                        lastFocusedElement = event.relatedTarget,\r\n                        within = instance.elements.root.contains(lastFocusedElement),\r\n                        target = event.srcElement || event.target,\r\n                        resetTarget;\r\n\r\n                    //if the previous focused element element was outside the modal do nthing\r\n                    if(  /*first show */\r\n                        (target === firstReset && !within) ||\r\n                         /*focus cycle */\r\n                        (target === lastReset && lastFocusedElement === firstReset)){\r\n                        return;\r\n                    }else if(target === lastReset || target === document.body){\r\n                        resetTarget = firstReset;\r\n                    }else if(target === firstReset && lastFocusedElement === lastReset){\r\n                        resetTarget = findTabbable(instance);\r\n                    }else if(target === firstReset && within){\r\n                        resetTarget = findTabbable(instance, true);\r\n                    }\r\n                    // focus\r\n                    setFocus(instance, resetTarget);\r\n                }\r\n            }\r\n        }\r\n        function findTabbable(instance, last){\r\n            var tabbables = [].slice.call(instance.elements.dialog.querySelectorAll(defaults.tabbable));\r\n            if(last){\r\n                tabbables.reverse();\r\n            }\r\n            for(var x=0;x<tabbables.length;x+=1){\r\n                var tabbable = tabbables[x];\r\n                //check if visible\r\n                if(!!(tabbable.offsetParent || tabbable.offsetWidth || tabbable.offsetHeight || tabbable.getClientRects().length)){\r\n                    return tabbable;\r\n                }\r\n            }\r\n        }\r\n        function recycleTab(event) {\r\n            var instance = openDialogs[openDialogs.length - 1];\r\n            if (instance && event.shiftKey && event.keyCode === keys.TAB) {\r\n                instance.elements.reset[1].focus();\r\n            }\r\n        }\r\n        /**\r\n         * Transition in transitionend event handler. \r\n         *\r\n         * @param {Event}\t\tTransitionEnd event object.\r\n         * @param {Object}\t\tThe dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function handleTransitionInEvent(event, instance) {\r\n            // clear the timer\r\n            clearTimeout(instance.__internal.timerIn);\r\n\r\n            // once transition is complete, set focus\r\n            setFocus(instance);\r\n\r\n            // allow handling key up after transition ended.\r\n            cancelKeyup = false;\r\n\r\n            // allow custom `onfocus` method\r\n            dispatchEvent('onfocus', instance);\r\n\r\n            // unbind the event\r\n            off(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler);\r\n\r\n            removeClass(instance.elements.root, classes.animationIn);\r\n        }\r\n\r\n        /**\r\n         * Transition out transitionend event handler. \r\n         *\r\n         * @param {Event}\t\tTransitionEnd event object.\r\n         * @param {Object}\t\tThe dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function handleTransitionOutEvent(event, instance) {\r\n            // clear the timer\r\n            clearTimeout(instance.__internal.timerOut);\r\n            // unbind the event\r\n            off(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler);\r\n\r\n            // reset move updates\r\n            resetMove(instance);\r\n            // reset resize updates\r\n            resetResize(instance);\r\n\r\n            // restore if maximized\r\n            if (instance.isMaximized() && !instance.get('startMaximized')) {\r\n                restore(instance);\r\n            }\r\n\r\n            //destory the instance\r\n            if (typeof instance.__internal.destroy === 'function') {\r\n                instance.__internal.destroy.apply(instance);\r\n            }\r\n        }\r\n        /* Controls moving a dialog around */\r\n        //holde the current moving instance\r\n        var movable = null,\r\n            //holds the current X offset when move starts\r\n            offsetX = 0,\r\n            //holds the current Y offset when move starts\r\n            offsetY = 0,\r\n            xProp = 'pageX',\r\n            yProp = 'pageY',\r\n            bounds = null,\r\n            refreshTop = false,\r\n            moveDelegate = null\r\n        ;\r\n\r\n        /**\r\n         * Helper: sets the element top/left coordinates\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Node} element The element being moved.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function moveElement(event, element) {\r\n            var left = (event[xProp] - offsetX),\r\n                top  = (event[yProp] - offsetY);\r\n\r\n            if(refreshTop){\r\n                top -= document.body.scrollTop;\r\n            }\r\n           \r\n            element.style.left = left + 'px';\r\n            element.style.top = top + 'px';\r\n           \r\n        }\r\n        /**\r\n         * Helper: sets the element top/left coordinates within screen bounds\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Node} element The element being moved.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function moveElementBounded(event, element) {\r\n            var left = (event[xProp] - offsetX),\r\n                top  = (event[yProp] - offsetY);\r\n\r\n            if(refreshTop){\r\n                top -= document.body.scrollTop;\r\n            }\r\n            \r\n            element.style.left = Math.min(bounds.maxLeft, Math.max(bounds.minLeft, left)) + 'px';\r\n            if(refreshTop){\r\n                element.style.top = Math.min(bounds.maxTop, Math.max(bounds.minTop, top)) + 'px';\r\n            }else{\r\n                element.style.top = Math.max(bounds.minTop, top) + 'px';\r\n            }\r\n        }\r\n            \r\n\r\n        /**\r\n         * Triggers the start of a move event, attached to the header element mouse down event.\r\n         * Adds no-selection class to the body, disabling selection while moving.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Object} instance The dilog instance.\r\n         * \r\n         * @return {Boolean} false\r\n         */\r\n        function beginMove(event, instance) {\r\n            if (resizable === null && !instance.isMaximized() && instance.get('movable')) {\r\n                var eventSrc, left=0, top=0;\r\n                if (event.type === 'touchstart') {\r\n                    event.preventDefault();\r\n                    eventSrc = event.targetTouches[0];\r\n                    xProp = 'clientX';\r\n                    yProp = 'clientY';\r\n                } else if (event.button === 0) {\r\n                    eventSrc = event;\r\n                }\r\n\r\n                if (eventSrc) {\r\n\r\n                    var element = instance.elements.dialog;\r\n                    addClass(element, classes.capture);\r\n\r\n                    if (element.style.left) {\r\n                        left = parseInt(element.style.left, 10);\r\n                    }\r\n\r\n                    if (element.style.top) {\r\n                        top = parseInt(element.style.top, 10);\r\n                    }\r\n                    \r\n                    offsetX = eventSrc[xProp] - left;\r\n                    offsetY = eventSrc[yProp] - top;\r\n\r\n                    if(instance.isModal()){\r\n                        offsetY += instance.elements.modal.scrollTop;\r\n                    }else if(instance.isPinned()){\r\n                        offsetY -= document.body.scrollTop;\r\n                    }\r\n                    \r\n                    if(instance.get('moveBounded')){\r\n                        var current = element,\r\n                            offsetLeft = -left,\r\n                            offsetTop = -top;\r\n                        \r\n                        //calc offset\r\n                        do {\r\n                            offsetLeft += current.offsetLeft;\r\n                            offsetTop += current.offsetTop;\r\n                        } while (current = current.offsetParent);\r\n                        \r\n                        bounds = {\r\n                            maxLeft : offsetLeft,\r\n                            minLeft : -offsetLeft,\r\n                            maxTop  : document.documentElement.clientHeight - element.clientHeight - offsetTop,\r\n                            minTop  : -offsetTop\r\n                        };\r\n                        moveDelegate = moveElementBounded;\r\n                    }else{\r\n                        bounds = null;\r\n                        moveDelegate = moveElement;\r\n                    }\r\n                    \r\n                    // allow custom `onmove` method\r\n                    dispatchEvent('onmove', instance);\r\n\r\n                    refreshTop = !instance.isModal() && instance.isPinned();\r\n                    movable = instance;\r\n                    moveDelegate(eventSrc, element);\r\n                    addClass(document.body, classes.noSelection);\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * The actual move handler,  attached to document.body mousemove event.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function move(event) {\r\n            if (movable) {\r\n                var eventSrc;\r\n                if (event.type === 'touchmove') {\r\n                    event.preventDefault();\r\n                    eventSrc = event.targetTouches[0];\r\n                } else if (event.button === 0) {\r\n                    eventSrc = event;\r\n                }\r\n                if (eventSrc) {\r\n                    moveDelegate(eventSrc, movable.elements.dialog);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Triggers the end of a move event,  attached to document.body mouseup event.\r\n         * Removes no-selection class from document.body, allowing selection.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function endMove() {\r\n            if (movable) {\r\n                var instance = movable;\r\n                movable = bounds = null;\r\n                removeClass(document.body, classes.noSelection);\r\n                removeClass(instance.elements.dialog, classes.capture);\r\n                // allow custom `onmoved` method\r\n                dispatchEvent('onmoved', instance);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Resets any changes made by moving the element to its original state,\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function resetMove(instance) {\r\n            movable = null;\r\n            var element = instance.elements.dialog;\r\n            element.style.left = element.style.top = '';\r\n        }\r\n\r\n        /**\r\n         * Updates the dialog move behavior.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateMovable(instance) {\r\n            if (instance.get('movable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.movable);\r\n                if (instance.isOpen()) {\r\n                    bindMovableEvents(instance);\r\n                }\r\n            } else {\r\n\r\n                //reset\r\n                resetMove(instance);\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.movable);\r\n                if (instance.isOpen()) {\r\n                    unbindMovableEvents(instance);\r\n                }\r\n            }\r\n        }\r\n\r\n        /* Controls moving a dialog around */\r\n        //holde the current instance being resized\t\t\r\n        var resizable = null,\r\n            //holds the staring left offset when resize starts.\r\n            startingLeft = Number.Nan,\r\n            //holds the staring width when resize starts.\r\n            startingWidth = 0,\r\n            //holds the initial width when resized for the first time.\r\n            minWidth = 0,\r\n            //holds the offset of the resize handle.\r\n            handleOffset = 0\r\n        ;\r\n\r\n        /**\r\n         * Helper: sets the element width/height and updates left coordinate if neccessary.\r\n         *\r\n         * @param {Event} event\tDOM mousemove event object.\r\n         * @param {Node} element The element being moved.\r\n         * @param {Boolean} pinned A flag indicating if the element being resized is pinned to the screen.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function resizeElement(event, element, pageRelative) {\r\n\r\n            //calculate offsets from 0,0\r\n            var current = element;\r\n            var offsetLeft = 0;\r\n            var offsetTop = 0;\r\n            do {\r\n                offsetLeft += current.offsetLeft;\r\n                offsetTop += current.offsetTop;\r\n            } while (current = current.offsetParent);\r\n\r\n            // determine X,Y coordinates.\r\n            var X, Y;\r\n            if (pageRelative === true) {\r\n                X = event.pageX;\r\n                Y = event.pageY;\r\n            } else {\r\n                X = event.clientX;\r\n                Y = event.clientY;\r\n            }\r\n            // rtl handling\r\n            var isRTL = isRightToLeft();\r\n            if (isRTL) {\r\n                // reverse X \r\n                X = document.body.offsetWidth - X;\r\n                // if has a starting left, calculate offsetRight\r\n                if (!isNaN(startingLeft)) {\r\n                    offsetLeft = document.body.offsetWidth - offsetLeft - element.offsetWidth;\r\n                }\r\n            }\r\n\r\n            // set width/height\r\n            element.style.height = (Y - offsetTop + handleOffset) + 'px';\r\n            element.style.width = (X - offsetLeft + handleOffset) + 'px';\r\n\r\n            // if the element being resized has a starting left, maintain it.\r\n            // the dialog is centered, divide by half the offset to maintain the margins.\r\n            if (!isNaN(startingLeft)) {\r\n                var diff = Math.abs(element.offsetWidth - startingWidth) * 0.5;\r\n                if (isRTL) {\r\n                    //negate the diff, why?\r\n                    //when growing it should decrease left\r\n                    //when shrinking it should increase left\r\n                    diff *= -1;\r\n                }\r\n                if (element.offsetWidth > startingWidth) {\r\n                    //growing\r\n                    element.style.left = (startingLeft + diff) + 'px';\r\n                } else if (element.offsetWidth >= minWidth) {\r\n                    //shrinking\r\n                    element.style.left = (startingLeft - diff) + 'px';\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Triggers the start of a resize event, attached to the resize handle element mouse down event.\r\n         * Adds no-selection class to the body, disabling selection while moving.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Object} instance The dilog instance.\r\n         * \r\n         * @return {Boolean} false\r\n         */\r\n        function beginResize(event, instance) {\r\n            if (!instance.isMaximized()) {\r\n                var eventSrc;\r\n                if (event.type === 'touchstart') {\r\n                    event.preventDefault();\r\n                    eventSrc = event.targetTouches[0];\r\n                } else if (event.button === 0) {\r\n                    eventSrc = event;\r\n                }\r\n                if (eventSrc) {\r\n                    // allow custom `onresize` method\r\n                    dispatchEvent('onresize', instance);\r\n                    \r\n                    resizable = instance;\r\n                    handleOffset = instance.elements.resizeHandle.offsetHeight / 2;\r\n                    var element = instance.elements.dialog;\r\n                    addClass(element, classes.capture);\r\n                    startingLeft = parseInt(element.style.left, 10);\r\n                    element.style.height = element.offsetHeight + 'px';\r\n                    element.style.minHeight = instance.elements.header.offsetHeight + instance.elements.footer.offsetHeight + 'px';\r\n                    element.style.width = (startingWidth = element.offsetWidth) + 'px';\r\n\r\n                    if (element.style.maxWidth !== 'none') {\r\n                        element.style.minWidth = (minWidth = element.offsetWidth) + 'px';\r\n                    }\r\n                    element.style.maxWidth = 'none';\r\n                    addClass(document.body, classes.noSelection);\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * The actual resize handler,  attached to document.body mousemove event.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function resize(event) {\r\n            if (resizable) {\r\n                var eventSrc;\r\n                if (event.type === 'touchmove') {\r\n                    event.preventDefault();\r\n                    eventSrc = event.targetTouches[0];\r\n                } else if (event.button === 0) {\r\n                    eventSrc = event;\r\n                }\r\n                if (eventSrc) {\r\n                    resizeElement(eventSrc, resizable.elements.dialog, !resizable.get('modal') && !resizable.get('pinned'));\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Triggers the end of a resize event,  attached to document.body mouseup event.\r\n         * Removes no-selection class from document.body, allowing selection.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function endResize() {\r\n            if (resizable) {\r\n                var instance = resizable;\r\n                resizable = null;\r\n                removeClass(document.body, classes.noSelection);\r\n                removeClass(instance.elements.dialog, classes.capture);\r\n                cancelClick = true;\r\n                // allow custom `onresized` method\r\n                dispatchEvent('onresized', instance);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Resets any changes made by resizing the element to its original state.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function resetResize(instance) {\r\n            resizable = null;\r\n            var element = instance.elements.dialog;\r\n            if (element.style.maxWidth === 'none') {\r\n                //clear inline styles.\r\n                element.style.maxWidth = element.style.minWidth = element.style.width = element.style.height = element.style.minHeight = element.style.left = '';\r\n                //reset variables.\r\n                startingLeft = Number.Nan;\r\n                startingWidth = minWidth = handleOffset = 0;\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Updates the dialog move behavior.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateResizable(instance) {\r\n            if (instance.get('resizable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.resizable);\r\n                if (instance.isOpen()) {\r\n                    bindResizableEvents(instance);\r\n                }\r\n            } else {\r\n                //reset\r\n                resetResize(instance);\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.resizable);\r\n                if (instance.isOpen()) {\r\n                    unbindResizableEvents(instance);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Reset move/resize on window resize.\r\n         *\r\n         * @param {Event} event\twindow resize event object.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function windowResize(/*event*/) {\r\n            for (var x = 0; x < openDialogs.length; x += 1) {\r\n                var instance = openDialogs[x];\r\n                if (instance.get('autoReset')) {\r\n                    resetMove(instance);\r\n                    resetResize(instance);\r\n                }\r\n            }\r\n        }\r\n        /**\r\n         * Bind dialogs events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindEvents(instance) {\r\n            // if first dialog, hook global handlers\r\n            if (openDialogs.length === 1) {\r\n                //global\r\n                on(window, 'resize', windowResize);\r\n                on(document.body, 'keyup', keyupHandler);\r\n                on(document.body, 'keydown', keydownHandler);\r\n                on(document.body, 'focus', onReset);\r\n\r\n                //move\r\n                on(document.documentElement, 'mousemove', move);\r\n                on(document.documentElement, 'touchmove', move, false, false);\r\n                on(document.documentElement, 'mouseup', endMove);\r\n                on(document.documentElement, 'touchend', endMove);\r\n                //resize\r\n                on(document.documentElement, 'mousemove', resize);\r\n                on(document.documentElement, 'touchmove', resize, false, false);\r\n                on(document.documentElement, 'mouseup', endResize);\r\n                on(document.documentElement, 'touchend', endResize);\r\n            }\r\n\r\n            // common events\r\n            on(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);\r\n            on(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);\r\n            on(instance.elements.reset[0], 'focusin', instance.__internal.resetHandler);\r\n            on(instance.elements.reset[0], 'keydown', recycleTab);\r\n            on(instance.elements.reset[1], 'focusin', instance.__internal.resetHandler);\r\n\r\n            //prevent handling key up when dialog is being opened by a key stroke.\r\n            cancelKeyup = true;\r\n            // hook in transition handler\r\n            on(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler);\r\n\r\n            // modelss only events\r\n            if (!instance.get('modal')) {\r\n                bindModelessEvents(instance);\r\n            }\r\n\r\n            // resizable\r\n            if (instance.get('resizable')) {\r\n                bindResizableEvents(instance);\r\n            }\r\n\r\n            // movable\r\n            if (instance.get('movable')) {\r\n                bindMovableEvents(instance);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Unbind dialogs events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindEvents(instance) {\r\n            // if last dialog, remove global handlers\r\n            if (openDialogs.length === 1) {\r\n                //global\r\n                off(window, 'resize', windowResize);\r\n                off(document.body, 'keyup', keyupHandler);\r\n                off(document.body, 'keydown', keydownHandler);\r\n                off(document.body, 'focus', onReset);\r\n                //move\r\n                off(document.documentElement, 'mousemove', move);\r\n                off(document.documentElement, 'mouseup', endMove);\r\n                //resize\r\n                off(document.documentElement, 'mousemove', resize);\r\n                off(document.documentElement, 'mouseup', endResize);\r\n            }\r\n\r\n            // common events\r\n            off(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);\r\n            off(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);\r\n            off(instance.elements.reset[0], 'focusin', instance.__internal.resetHandler);\r\n            off(instance.elements.reset[0], 'keydown', recycleTab);\r\n            off(instance.elements.reset[1], 'focusin', instance.__internal.resetHandler);\r\n\r\n            // hook out transition handler\r\n            on(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler);\r\n\r\n            // modelss only events\r\n            if (!instance.get('modal')) {\r\n                unbindModelessEvents(instance);\r\n            }\r\n\r\n            // movable\r\n            if (instance.get('movable')) {\r\n                unbindMovableEvents(instance);\r\n            }\r\n\r\n            // resizable\r\n            if (instance.get('resizable')) {\r\n                unbindResizableEvents(instance);\r\n            }\r\n\r\n        }\r\n\r\n        /**\r\n         * Bind modeless specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindModelessEvents(instance) {\r\n            on(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);\r\n        }\r\n\r\n        /**\r\n         * Unbind modeless specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindModelessEvents(instance) {\r\n            off(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Bind movable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindMovableEvents(instance) {\r\n            on(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);\r\n            on(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler, false, false);\r\n        }\r\n\r\n        /**\r\n         * Unbind movable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindMovableEvents(instance) {\r\n            off(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);\r\n            off(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler, false, false);\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Bind resizable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindResizableEvents(instance) {\r\n            on(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);\r\n            on(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler, false, false);\r\n        }\r\n\r\n        /**\r\n         * Unbind resizable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindResizableEvents(instance) {\r\n            off(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);\r\n            off(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler, false, false);\r\n        }\r\n\r\n        /**\r\n         * Bind closable events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindClosableEvents(instance) {\r\n            on(instance.elements.modal, 'click', instance.__internal.modalClickHandler);\r\n        }\r\n\r\n        /**\r\n         * Unbind closable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindClosableEvents(instance) {\r\n            off(instance.elements.modal, 'click', instance.__internal.modalClickHandler);\r\n        }\r\n        // dialog API\r\n        return {\r\n            __init:initialize,\r\n            /**\r\n             * Check if dialog is currently open\r\n             *\r\n             * @return {Boolean}\r\n             */\r\n            isOpen: function () {\r\n                return this.__internal.isOpen;\r\n            },\r\n            isModal: function (){\r\n                return this.elements.root.className.indexOf(classes.modeless) < 0;\r\n            },\r\n            isMaximized:function(){\r\n                return this.elements.root.className.indexOf(classes.maximized) > -1;\r\n            },\r\n            isPinned:function(){\r\n                return this.elements.root.className.indexOf(classes.unpinned) < 0;\r\n            },\r\n            maximize:function(){\r\n                if(!this.isMaximized()){\r\n                    maximize(this);\r\n                }\r\n                return this;\r\n            },\r\n            restore:function(){\r\n                if(this.isMaximized()){\r\n                    restore(this);\r\n                }\r\n                return this;\r\n            },\r\n            pin:function(){\r\n                if(!this.isPinned()){\r\n                    pin(this);\r\n                }\r\n                return this;\r\n            },\r\n            unpin:function(){\r\n                if(this.isPinned()){\r\n                    unpin(this);\r\n                }\r\n                return this;\r\n            },\r\n            bringToFront:function(){\r\n                bringToFront(null, this);\r\n                return this;\r\n            },\r\n            /**\r\n             * Move the dialog to a specific x/y coordinates\r\n             *\r\n             * @param {Number} x    The new dialog x coordinate in pixels.\r\n             * @param {Number} y    The new dialog y coordinate in pixels.\r\n             *\r\n             * @return {Object} The dialog instance.\r\n             */\r\n            moveTo:function(x,y){\r\n                if(!isNaN(x) && !isNaN(y)){\r\n                    // allow custom `onmove` method\r\n                    dispatchEvent('onmove', this);\r\n                    \r\n                    var element = this.elements.dialog,\r\n                        current = element,\r\n                        offsetLeft = 0,\r\n                        offsetTop = 0;\r\n                    \r\n                    //subtract existing left,top\r\n                    if (element.style.left) {\r\n                        offsetLeft -= parseInt(element.style.left, 10);\r\n                    }\r\n                    if (element.style.top) {\r\n                        offsetTop -= parseInt(element.style.top, 10);\r\n                    }\r\n                    //calc offset\r\n                    do {\r\n                        offsetLeft += current.offsetLeft;\r\n                        offsetTop += current.offsetTop;\r\n                    } while (current = current.offsetParent);\r\n\r\n                    //calc left, top\r\n                    var left = (x - offsetLeft);\r\n                    var top  = (y - offsetTop);\r\n\r\n                    //// rtl handling\r\n                    if (isRightToLeft()) {\r\n                        left *= -1;\r\n                    }\r\n\r\n                    element.style.left = left + 'px';\r\n                    element.style.top = top + 'px';\r\n                    \r\n                    // allow custom `onmoved` method\r\n                    dispatchEvent('onmoved', this);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Resize the dialog to a specific width/height (the dialog must be 'resizable').\r\n             * The dialog can be resized to:\r\n             *  A minimum width equal to the initial display width\r\n             *  A minimum height equal to the sum of header/footer heights.\r\n             *\r\n             *\r\n             * @param {Number or String} width    The new dialog width in pixels or in percent.\r\n             * @param {Number or String} height   The new dialog height in pixels or in percent.\r\n             *\r\n             * @return {Object} The dialog instance.\r\n             */\r\n            resizeTo:function(width,height){\r\n                var w = parseFloat(width),\r\n                    h = parseFloat(height),\r\n                    regex = /(\\d*\\.\\d+|\\d+)%/\r\n                ;\r\n\r\n                if(!isNaN(w) && !isNaN(h) && this.get('resizable') === true){\r\n                    \r\n                    // allow custom `onresize` method\r\n                    dispatchEvent('onresize', this);\r\n                    \r\n                    if(('' + width).match(regex)){\r\n                        w = w / 100 * document.documentElement.clientWidth ;\r\n                    }\r\n\r\n                    if(('' + height).match(regex)){\r\n                        h = h / 100 * document.documentElement.clientHeight;\r\n                    }\r\n\r\n                    var element = this.elements.dialog;\r\n                    if (element.style.maxWidth !== 'none') {\r\n                        element.style.minWidth = (minWidth = element.offsetWidth) + 'px';\r\n                    }\r\n                    element.style.maxWidth = 'none';\r\n                    element.style.minHeight = this.elements.header.offsetHeight + this.elements.footer.offsetHeight + 'px';\r\n                    element.style.width = w + 'px';\r\n                    element.style.height = h + 'px';\r\n                    \r\n                    // allow custom `onresized` method\r\n                    dispatchEvent('onresized', this);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Gets or Sets dialog settings/options \r\n             *\r\n             * @param {String|Object} key A string specifying a propery name or a collection of key/value pairs.\r\n             * @param {Object} value Optional, the value associated with the key (in case it was a string).\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            setting : function (key, value) {\r\n                var self = this;\r\n                var result = update(this, this.__internal.options, function(k,o,n){ optionUpdated(self,k,o,n); }, key, value);\r\n                if(result.op === 'get'){\r\n                    if(result.found){\r\n                        return result.value;\r\n                    }else if(typeof this.settings !== 'undefined'){\r\n                        return update(this, this.settings, this.settingUpdated || function(){}, key, value).value;\r\n                    }else{\r\n                        return undefined;\r\n                    }\r\n                }else if(result.op === 'set'){\r\n                    if(result.items.length > 0){\r\n                        var callback = this.settingUpdated || function(){};\r\n                        for(var x=0;x<result.items.length;x+=1){\r\n                            var item = result.items[x];\r\n                            if(!item.found && typeof this.settings !== 'undefined'){\r\n                                update(this, this.settings, callback, item.key, item.value);\r\n                            }\r\n                        }\r\n                    }\r\n                    return this;\r\n                }\r\n            },\r\n            /**\r\n             * [Alias] Sets dialog settings/options \r\n             */\r\n            set:function(key, value){\r\n                this.setting(key,value);\r\n                return this;\r\n            },\r\n            /**\r\n             * [Alias] Gets dialog settings/options \r\n             */\r\n            get:function(key){\r\n                return this.setting(key);\r\n            },\r\n            /**\r\n            * Sets dialog header\r\n            * @content {string or element}\r\n            *\r\n            * @return {undefined}\r\n            */\r\n            setHeader:function(content){\r\n                if(typeof content === 'string'){\r\n                    clearContents(this.elements.header);\r\n                    this.elements.header.innerHTML = content;\r\n                }else if (content instanceof window.HTMLElement && this.elements.header.firstChild !== content){\r\n                    clearContents(this.elements.header);\r\n                    this.elements.header.appendChild(content);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n            * Sets dialog contents\r\n            * @content {string or element}\r\n            *\r\n            * @return {undefined}\r\n            */\r\n            setContent:function(content){\r\n                if(typeof content === 'string'){\r\n                    clearContents(this.elements.content);\r\n                    this.elements.content.innerHTML = content;\r\n                }else if (content instanceof window.HTMLElement && this.elements.content.firstChild !== content){\r\n                    clearContents(this.elements.content);\r\n                    this.elements.content.appendChild(content);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Show the dialog as modal\r\n             *\r\n             * @return {Object} the dialog instance.\r\n             */\r\n            showModal: function(className){\r\n                return this.show(true, className);\r\n            },\r\n            /**\r\n             * Show the dialog\r\n             *\r\n             * @return {Object} the dialog instance.\r\n             */\r\n            show: function (modal, className) {\r\n                \r\n                // ensure initialization\r\n                initialize(this);\r\n\r\n                if ( !this.__internal.isOpen ) {\r\n\r\n                    // add to open dialogs\r\n                    this.__internal.isOpen = true;\r\n                    openDialogs.push(this);\r\n\r\n                    // save last focused element\r\n                    if(alertify.defaults.maintainFocus){\r\n                        this.__internal.activeElement = document.activeElement;\r\n                    }\r\n\r\n                    // set tabindex attribute on body element this allows script to give it focusable\r\n                    if(!document.body.hasAttribute('tabindex')) {\r\n                        document.body.setAttribute( 'tabindex', tabindex = '0');\r\n                    }\r\n\r\n                    //allow custom dom manipulation updates before showing the dialog.\r\n                    if(typeof this.prepare === 'function'){\r\n                        this.prepare();\r\n                    }\r\n\r\n                    bindEvents(this);\r\n\r\n                    if(modal !== undefined){\r\n                        this.set('modal', modal);\r\n                    }\r\n\r\n                    //save scroll to prevent document jump\r\n                    saveScrollPosition();\r\n\r\n                    ensureNoOverflow();\r\n\r\n                    // allow custom dialog class on show\r\n                    if(typeof className === 'string' && className !== ''){\r\n                        this.__internal.className = className;\r\n                        addClass(this.elements.root, className);\r\n                    }\r\n\r\n                    // maximize if start maximized\r\n                    if ( this.get('startMaximized')) {\r\n                        this.maximize();\r\n                    }else if(this.isMaximized()){\r\n                        restore(this);\r\n                    }\r\n\r\n                    updateAbsPositionFix(this);\r\n                    this.elements.root.removeAttribute('style');\r\n                    removeClass(this.elements.root, classes.animationOut);\r\n                    addClass(this.elements.root, classes.animationIn);\r\n\r\n                    // set 1s fallback in case transition event doesn't fire\r\n                    clearTimeout( this.__internal.timerIn);\r\n                    this.__internal.timerIn = setTimeout( this.__internal.transitionInHandler, transition.supported ? 1000 : 100 );\r\n\r\n                    if(isSafari){\r\n                        // force desktop safari reflow\r\n                        var root = this.elements.root;\r\n                        root.style.display  = 'none';\r\n                        setTimeout(function(){root.style.display  = 'block';}, 0);\r\n                    }\r\n\r\n                    //reflow\r\n                    reflow = this.elements.root.offsetWidth;\r\n                  \r\n                    // show dialog\r\n                    removeClass(this.elements.root, classes.hidden);\r\n\r\n                    //restore scroll to prevent document jump\r\n                    restoreScrollPosition();\r\n\r\n                    // internal on show event\r\n                    if(typeof this.hooks.onshow === 'function'){\r\n                        this.hooks.onshow.call(this);\r\n                    }\r\n\r\n                    // allow custom `onshow` method\r\n                    dispatchEvent('onshow', this);\r\n\r\n                }else{\r\n                    // reset move updates\r\n                    resetMove(this);\r\n                    // reset resize updates\r\n                    resetResize(this);\r\n                    // shake the dialog to indicate its already open\r\n                    addClass(this.elements.dialog, classes.shake);\r\n                    var self = this;\r\n                    setTimeout(function(){\r\n                        removeClass(self.elements.dialog, classes.shake);\r\n                    },200);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Close the dialog\r\n             *\r\n             * @return {Object} The dialog instance\r\n             */\r\n            close: function () {\r\n                if (this.__internal.isOpen ) {\r\n                    // custom `onclosing` event\r\n                    if(dispatchEvent('onclosing', this) !== false){\r\n\r\n                        unbindEvents(this);\r\n\r\n                        removeClass(this.elements.root, classes.animationIn);\r\n                        addClass(this.elements.root, classes.animationOut);\r\n\r\n                        // set 1s fallback in case transition event doesn't fire\r\n                        clearTimeout( this.__internal.timerOut );\r\n                        this.__internal.timerOut = setTimeout( this.__internal.transitionOutHandler, transition.supported ? 1000 : 100 );\r\n                        // hide dialog\r\n                        addClass(this.elements.root, classes.hidden);\r\n                        //reflow\r\n                        reflow = this.elements.modal.offsetWidth;\r\n\r\n                        // return focus to the last active element\r\n                        if (alertify.defaults.maintainFocus && this.__internal.activeElement) {\r\n                            this.__internal.activeElement.focus();\r\n                            this.__internal.activeElement = null;\r\n                        }\r\n\r\n                        // remove custom dialog class on hide\r\n                        if (typeof this.__internal.className !== 'undefined' && this.__internal.className !== '') {\r\n                            removeClass(this.elements.root, this.__internal.className);\r\n                        }\r\n\r\n                        // internal on close event\r\n                        if(typeof this.hooks.onclose === 'function'){\r\n                            this.hooks.onclose.call(this);\r\n                        }\r\n\r\n                        // allow custom `onclose` method\r\n                        dispatchEvent('onclose', this);\r\n\r\n                        //remove from open dialogs\r\n                        openDialogs.splice(openDialogs.indexOf(this),1);\r\n                        this.__internal.isOpen = false;\r\n\r\n                        ensureNoOverflow();\r\n                    }\r\n\r\n                }\r\n                // last dialog and tab index was set by us, remove it.\r\n                if(!openDialogs.length && tabindex === '0'){\r\n                    document.body.removeAttribute('tabindex');\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Close all open dialogs except this.\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            closeOthers:function(){\r\n                alertify.closeAll(this);\r\n                return this;\r\n            },\r\n            /**\r\n             * Destroys this dialog instance\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            destroy:function(){\r\n                if(this.__internal) {\r\n                    if (this.__internal.isOpen ) {\r\n                        //mark dialog for destruction, this will be called on tranistionOut event.\r\n                        this.__internal.destroy = function(){\r\n                            destruct(this, initialize);\r\n                        };\r\n                        //close the dialog to unbind all events.\r\n                        this.close();\r\n                    }else if(!this.__internal.destroy){\r\n                        destruct(this, initialize);\r\n                    }\r\n                }\r\n                return this;\r\n            },\r\n        };\r\n\t} () );\r\n    var notifier = (function () {\r\n        var reflow,\r\n            element,\r\n            openInstances = [],\r\n            classes = defaults.notifier.classes,\r\n            baseClass = classes.base;\r\n        /**\r\n         * Helper: initializes the notifier instance\r\n         *\r\n         */\r\n        function initialize(instance) {\r\n\r\n            if (!instance.__internal) {\r\n                instance.__internal = {\r\n                    position: alertify.defaults.notifier.position,\r\n                    delay: alertify.defaults.notifier.delay,\r\n                };\r\n\r\n                element = document.createElement('DIV');\r\n                var transitionOff = 'transitionOff' in defaults.notifier ? defaults.notifier.transitionOff : defaults.transitionOff;\r\n                if(transitionOff){\r\n                    baseClass = classes.base + ' ajs-no-transition';\r\n                }\r\n                updatePosition(instance);\r\n            }\r\n\r\n            //add to DOM tree.\r\n            if (element.parentNode !== document.body) {\r\n                document.body.appendChild(element);\r\n            }\r\n        }\r\n\r\n        function pushInstance(instance) {\r\n            instance.__internal.pushed = true;\r\n            openInstances.push(instance);\r\n        }\r\n        function popInstance(instance) {\r\n            openInstances.splice(openInstances.indexOf(instance), 1);\r\n            instance.__internal.pushed = false;\r\n        }\r\n        /**\r\n         * Helper: update the notifier instance position\r\n         *\r\n         */\r\n        function updatePosition(instance) {\r\n            element.className = baseClass;\r\n            switch (instance.__internal.position) {\r\n            case 'top-right':\r\n                addClass(element, classes.top + ' ' + classes.right);\r\n                break;\r\n            case 'top-left':\r\n                addClass(element, classes.top + ' ' + classes.left);\r\n                break;\r\n            case 'top-center':\r\n                addClass(element, classes.top + ' ' + classes.center);\r\n                break;\r\n            case 'bottom-left':\r\n                addClass(element, classes.bottom + ' ' + classes.left);\r\n                break;\r\n            case 'bottom-center':\r\n                addClass(element, classes.bottom + ' ' + classes.center);\r\n                break;\r\n\r\n            default:\r\n            case 'bottom-right':\r\n                addClass(element, classes.bottom + ' ' + classes.right);\r\n                break;\r\n            }\r\n        }\r\n\r\n        /**\r\n        * creates a new notification message\r\n        *\r\n        * @param  {DOMElement} message\tThe notifier message element\r\n        * @param  {Number} wait   Time (in ms) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n        * @param  {Function} callback A callback function to be invoked when the message is dismissed.\r\n        *\r\n        * @return {undefined}\r\n        */\r\n        function create(div, callback) {\r\n\r\n            function clickDelegate(event, instance) {\r\n                if(!instance.__internal.closeButton || event.target.getAttribute('data-close') === 'true'){\r\n                    instance.dismiss(true);\r\n                }\r\n            }\r\n\r\n            function transitionDone(event, instance) {\r\n                // unbind event\r\n                off(instance.element, transition.type, transitionDone);\r\n                // remove the message\r\n                element.removeChild(instance.element);\r\n            }\r\n\r\n            function initialize(instance) {\r\n                if (!instance.__internal) {\r\n                    instance.__internal = {\r\n                        pushed: false,\r\n                        delay : undefined,\r\n                        timer: undefined,\r\n                        clickHandler: undefined,\r\n                        transitionEndHandler: undefined,\r\n                        transitionTimeout: undefined\r\n                    };\r\n                    instance.__internal.clickHandler = delegate(instance, clickDelegate);\r\n                    instance.__internal.transitionEndHandler = delegate(instance, transitionDone);\r\n                }\r\n                return instance;\r\n            }\r\n            function clearTimers(instance) {\r\n                clearTimeout(instance.__internal.timer);\r\n                clearTimeout(instance.__internal.transitionTimeout);\r\n            }\r\n            return initialize({\r\n                /* notification DOM element*/\r\n                element: div,\r\n                /*\r\n                 * Pushes a notification message\r\n                 * @param {string or DOMElement} content The notification message content\r\n                 * @param {Number} wait The time (in seconds) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n                 *\r\n                 */\r\n                push: function (_content, _wait) {\r\n                    if (!this.__internal.pushed) {\r\n\r\n                        pushInstance(this);\r\n                        clearTimers(this);\r\n\r\n                        var content, wait;\r\n                        switch (arguments.length) {\r\n                        case 0:\r\n                            wait = this.__internal.delay;\r\n                            break;\r\n                        case 1:\r\n                            if (typeof (_content) === 'number') {\r\n                                wait = _content;\r\n                            } else {\r\n                                content = _content;\r\n                                wait = this.__internal.delay;\r\n                            }\r\n                            break;\r\n                        case 2:\r\n                            content = _content;\r\n                            wait = _wait;\r\n                            break;\r\n                        }\r\n                        this.__internal.closeButton = alertify.defaults.notifier.closeButton;\r\n                        // set contents\r\n                        if (typeof content !== 'undefined') {\r\n                            this.setContent(content);\r\n                        }\r\n                        // append or insert\r\n                        if (notifier.__internal.position.indexOf('top') < 0) {\r\n                            element.appendChild(this.element);\r\n                        } else {\r\n                            element.insertBefore(this.element, element.firstChild);\r\n                        }\r\n                        reflow = this.element.offsetWidth;\r\n                        addClass(this.element, classes.visible);\r\n                        // attach click event\r\n                        on(this.element, 'click', this.__internal.clickHandler);\r\n                        return this.delay(wait);\r\n                    }\r\n                    return this;\r\n                },\r\n                /*\r\n                 * {Function} callback function to be invoked before dismissing the notification message.\r\n                 * Remarks: A return value === 'false' will cancel the dismissal\r\n                 *\r\n                 */\r\n                ondismiss: function () { },\r\n                /*\r\n                 * {Function} callback function to be invoked when the message is dismissed.\r\n                 *\r\n                 */\r\n                callback: callback,\r\n                /*\r\n                 * Dismisses the notification message\r\n                 * @param {Boolean} clicked A flag indicating if the dismissal was caused by a click.\r\n                 *\r\n                 */\r\n                dismiss: function (clicked) {\r\n                    if (this.__internal.pushed) {\r\n                        clearTimers(this);\r\n                        if (!(typeof this.ondismiss === 'function' && this.ondismiss.call(this) === false)) {\r\n                            //detach click event\r\n                            off(this.element, 'click', this.__internal.clickHandler);\r\n                            // ensure element exists\r\n                            if (typeof this.element !== 'undefined' && this.element.parentNode === element) {\r\n                                //transition end or fallback\r\n                                this.__internal.transitionTimeout = setTimeout(this.__internal.transitionEndHandler, transition.supported ? 1000 : 100);\r\n                                removeClass(this.element, classes.visible);\r\n\r\n                                // custom callback on dismiss\r\n                                if (typeof this.callback === 'function') {\r\n                                    this.callback.call(this, clicked);\r\n                                }\r\n                            }\r\n                            popInstance(this);\r\n                        }\r\n                    }\r\n                    return this;\r\n                },\r\n                /*\r\n                 * Delays the notification message dismissal\r\n                 * @param {Number} wait The time (in seconds) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n                 *\r\n                 */\r\n                delay: function (wait) {\r\n                    clearTimers(this);\r\n                    this.__internal.delay = typeof wait !== 'undefined' && !isNaN(+wait) ? +wait : notifier.__internal.delay;\r\n                    if (this.__internal.delay > 0) {\r\n                        var  self = this;\r\n                        this.__internal.timer = setTimeout(function () { self.dismiss(); }, this.__internal.delay * 1000);\r\n                    }\r\n                    return this;\r\n                },\r\n                /*\r\n                 * Sets the notification message contents\r\n                 * @param {string or DOMElement} content The notification message content\r\n                 *\r\n                 */\r\n                setContent: function (content) {\r\n                    if (typeof content === 'string') {\r\n                        clearContents(this.element);\r\n                        this.element.innerHTML = content;\r\n                    } else if (content instanceof window.HTMLElement && this.element.firstChild !== content) {\r\n                        clearContents(this.element);\r\n                        this.element.appendChild(content);\r\n                    }\r\n                    if(this.__internal.closeButton){\r\n                        var close = document.createElement('span');\r\n                        addClass(close, classes.close);\r\n                        close.setAttribute('data-close', true);\r\n                        this.element.appendChild(close);\r\n                    }\r\n                    return this;\r\n                },\r\n                /*\r\n                 * Dismisses all open notifications except this.\r\n                 *\r\n                 */\r\n                dismissOthers: function () {\r\n                    notifier.dismissAll(this);\r\n                    return this;\r\n                }\r\n            });\r\n        }\r\n\r\n        //notifier api\r\n        return {\r\n            /**\r\n             * Gets or Sets notifier settings.\r\n             *\r\n             * @param {string} key The setting name\r\n             * @param {Variant} value The setting value.\r\n             *\r\n             * @return {Object}\tif the called as a setter, return the notifier instance.\r\n             */\r\n            setting: function (key, value) {\r\n                //ensure init\r\n                initialize(this);\r\n\r\n                if (typeof value === 'undefined') {\r\n                    //get\r\n                    return this.__internal[key];\r\n                } else {\r\n                    //set\r\n                    switch (key) {\r\n                    case 'position':\r\n                        this.__internal.position = value;\r\n                        updatePosition(this);\r\n                        break;\r\n                    case 'delay':\r\n                        this.__internal.delay = value;\r\n                        break;\r\n                    }\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * [Alias] Sets dialog settings/options\r\n             */\r\n            set:function(key,value){\r\n                this.setting(key,value);\r\n                return this;\r\n            },\r\n            /**\r\n             * [Alias] Gets dialog settings/options\r\n             */\r\n            get:function(key){\r\n                return this.setting(key);\r\n            },\r\n            /**\r\n             * Creates a new notification message\r\n             *\r\n             * @param {string} type The type of notification message (simply a CSS class name 'ajs-{type}' to be added).\r\n             * @param {Function} callback  A callback function to be invoked when the message is dismissed.\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            create: function (type, callback) {\r\n                //ensure notifier init\r\n                initialize(this);\r\n                //create new notification message\r\n                var div = document.createElement('div');\r\n                div.className = classes.message + ((typeof type === 'string' && type !== '') ? ' ' + classes.prefix + type : '');\r\n                return create(div, callback);\r\n            },\r\n            /**\r\n             * Dismisses all open notifications.\r\n             *\r\n             * @param {Object} excpet [optional] The notification object to exclude from dismissal.\r\n             *\r\n             */\r\n            dismissAll: function (except) {\r\n                var clone = openInstances.slice(0);\r\n                for (var x = 0; x < clone.length; x += 1) {\r\n                    var  instance = clone[x];\r\n                    if (except === undefined || except !== instance) {\r\n                        instance.dismiss();\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    })();\r\n\r\n    /**\r\n     * Alertify public API\r\n     * This contains everything that is exposed through the alertify object.\r\n     *\r\n     * @return {Object}\r\n     */\r\n    function Alertify() {\r\n\r\n        // holds a references of created dialogs\r\n        var dialogs = {};\r\n\r\n        /**\r\n         * Extends a given prototype by merging properties from base into sub.\r\n         *\r\n         * @sub {Object} sub The prototype being overwritten.\r\n         * @base {Object} base The prototype being written.\r\n         *\r\n         * @return {Object} The extended prototype.\r\n         */\r\n        function extend(sub, base) {\r\n            // copy dialog pototype over definition.\r\n            for (var prop in base) {\r\n                if (base.hasOwnProperty(prop)) {\r\n                    sub[prop] = base[prop];\r\n                }\r\n            }\r\n            return sub;\r\n        }\r\n\r\n\r\n        /**\r\n        * Helper: returns a dialog instance from saved dialogs.\r\n        * and initializes the dialog if its not already initialized.\r\n        *\r\n        * @name {String} name The dialog name.\r\n        *\r\n        * @return {Object} The dialog instance.\r\n        */\r\n        function get_dialog(name) {\r\n            var dialog = dialogs[name].dialog;\r\n            //initialize the dialog if its not already initialized.\r\n            if (dialog && typeof dialog.__init === 'function') {\r\n                dialog.__init(dialog);\r\n            }\r\n            return dialog;\r\n        }\r\n\r\n        /**\r\n         * Helper:  registers a new dialog definition.\r\n         *\r\n         * @name {String} name The dialog name.\r\n         * @Factory {Function} Factory a function resposible for creating dialog prototype.\r\n         * @transient {Boolean} transient True to create a new dialog instance each time the dialog is invoked, false otherwise.\r\n         * @base {String} base the name of another dialog to inherit from.\r\n         *\r\n         * @return {Object} The dialog definition.\r\n         */\r\n        function register(name, Factory, transient, base) {\r\n            var definition = {\r\n                dialog: null,\r\n                factory: Factory\r\n            };\r\n\r\n            //if this is based on an existing dialog, create a new definition\r\n            //by applying the new protoype over the existing one.\r\n            if (base !== undefined) {\r\n                definition.factory = function () {\r\n                    return extend(new dialogs[base].factory(), new Factory());\r\n                };\r\n            }\r\n\r\n            if (!transient) {\r\n                //create a new definition based on dialog\r\n                definition.dialog = extend(new definition.factory(), dialog);\r\n            }\r\n            return dialogs[name] = definition;\r\n        }\r\n\r\n        return {\r\n            /**\r\n             * Alertify defaults\r\n             * \r\n             * @type {Object}\r\n             */\r\n            defaults: defaults,\r\n            /**\r\n             * Dialogs factory \r\n             *\r\n             * @param {string}      Dialog name.\r\n             * @param {Function}    A Dialog factory function.\r\n             * @param {Boolean}     Indicates whether to create a singleton or transient dialog.\r\n             * @param {String}      The name of the base type to inherit from.\r\n             */\r\n            dialog: function (name, Factory, transient, base) {\r\n\r\n                // get request, create a new instance and return it.\r\n                if (typeof Factory !== 'function') {\r\n                    return get_dialog(name);\r\n                }\r\n\r\n                if (this.hasOwnProperty(name)) {\r\n                    throw new Error('alertify.dialog: name already exists');\r\n                }\r\n\r\n                // register the dialog\r\n                var definition = register(name, Factory, transient, base);\r\n\r\n                if (transient) {\r\n\r\n                    // make it public\r\n                    this[name] = function () {\r\n                        //if passed with no params, consider it a get request\r\n                        if (arguments.length === 0) {\r\n                            return definition.dialog;\r\n                        } else {\r\n                            var instance = extend(new definition.factory(), dialog);\r\n                            //ensure init\r\n                            if (instance && typeof instance.__init === 'function') {\r\n                                instance.__init(instance);\r\n                            }\r\n                            instance['main'].apply(instance, arguments);\r\n                            return instance['show'].apply(instance);\r\n                        }\r\n                    };\r\n                } else {\r\n                    // make it public\r\n                    this[name] = function () {\r\n                        //ensure init\r\n                        if (definition.dialog && typeof definition.dialog.__init === 'function') {\r\n                            definition.dialog.__init(definition.dialog);\r\n                        }\r\n                        //if passed with no params, consider it a get request\r\n                        if (arguments.length === 0) {\r\n                            return definition.dialog;\r\n                        } else {\r\n                            var dialog = definition.dialog;\r\n                            dialog['main'].apply(definition.dialog, arguments);\r\n                            return dialog['show'].apply(definition.dialog);\r\n                        }\r\n                    };\r\n                }\r\n            },\r\n            /**\r\n             * Close all open dialogs.\r\n             *\r\n             * @param {Object} excpet [optional] The dialog object to exclude from closing.\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            closeAll: function (except) {\r\n                var clone = openDialogs.slice(0);\r\n                for (var x = 0; x < clone.length; x += 1) {\r\n                    var instance = clone[x];\r\n                    if (except === undefined || except !== instance) {\r\n                        instance.close();\r\n                    }\r\n                }\r\n            },\r\n            /**\r\n             * Gets or Sets dialog settings/options. if the dialog is transient, this call does nothing.\r\n             *\r\n             * @param {string} name The dialog name.\r\n             * @param {String|Object} key A string specifying a propery name or a collection of key/value pairs.\r\n             * @param {Variant} value Optional, the value associated with the key (in case it was a string).\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            setting: function (name, key, value) {\r\n\r\n                if (name === 'notifier') {\r\n                    return notifier.setting(key, value);\r\n                }\r\n\r\n                var dialog = get_dialog(name);\r\n                if (dialog) {\r\n                    return dialog.setting(key, value);\r\n                }\r\n            },\r\n            /**\r\n             * [Alias] Sets dialog settings/options \r\n             */\r\n            set: function(name,key,value){\r\n                return this.setting(name, key,value);\r\n            },\r\n            /**\r\n             * [Alias] Gets dialog settings/options \r\n             */\r\n            get: function(name, key){\r\n                return this.setting(name, key);\r\n            },\r\n            /**\r\n             * Creates a new notification message.\r\n             * If a type is passed, a class name \"ajs-{type}\" will be added.\r\n             * This allows for custom look and feel for various types of notifications.\r\n             *\r\n             * @param  {String | DOMElement}    [message=undefined]\t\tMessage text\r\n             * @param  {String}                 [type='']\t\t\t\tType of log message\r\n             * @param  {String}                 [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}               [callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            notify: function (message, type, wait, callback) {\r\n                return notifier.create(type, callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Creates a new notification message.\r\n             *\r\n             * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n             * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            message: function (message, wait, callback) {\r\n                return notifier.create(null, callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Creates a new notification message of type 'success'.\r\n             *\r\n             * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n             * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            success: function (message, wait, callback) {\r\n                return notifier.create('success', callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Creates a new notification message of type 'error'.\r\n             *\r\n             * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n             * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            error: function (message, wait, callback) {\r\n                return notifier.create('error', callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Creates a new notification message of type 'warning'.\r\n             *\r\n             * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n             * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            warning: function (message, wait, callback) {\r\n                return notifier.create('warning', callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Dismisses all open notifications\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            dismissAll: function () {\r\n                notifier.dismissAll();\r\n            }\r\n        };\r\n    }\r\n    var alertify = new Alertify();\r\n\r\n    /**\r\n    * Alert dialog definition\r\n    *\r\n    * invoked by:\r\n    *\talertify.alert(message);\r\n    *\talertify.alert(title, message);\r\n    *\talertify.alert(message, onok);\r\n    *\talertify.alert(title, message, onok);\r\n     */\r\n    alertify.dialog('alert', function () {\r\n        return {\r\n            main: function (_title, _message, _onok) {\r\n                var title, message, onok;\r\n                switch (arguments.length) {\r\n                case 1:\r\n                    message = _title;\r\n                    break;\r\n                case 2:\r\n                    if (typeof _message === 'function') {\r\n                        message = _title;\r\n                        onok = _message;\r\n                    } else {\r\n                        title = _title;\r\n                        message = _message;\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    title = _title;\r\n                    message = _message;\r\n                    onok = _onok;\r\n                    break;\r\n                }\r\n                this.set('title', title);\r\n                this.set('message', message);\r\n                this.set('onok', onok);\r\n                return this;\r\n            },\r\n            setup: function () {\r\n                return {\r\n                    buttons: [\r\n                        {\r\n                            text: alertify.defaults.glossary.ok,\r\n                            key: keys.ESC,\r\n                            invokeOnClose: true,\r\n                            className: alertify.defaults.theme.ok,\r\n                        }\r\n                    ],\r\n                    focus: {\r\n                        element: 0,\r\n                        select: false\r\n                    },\r\n                    options: {\r\n                        maximizable: false,\r\n                        resizable: false\r\n                    }\r\n                };\r\n            },\r\n            build: function () {\r\n                // nothing\r\n            },\r\n            prepare: function () {\r\n                //nothing\r\n            },\r\n            setMessage: function (message) {\r\n                this.setContent(message);\r\n            },\r\n            settings: {\r\n                message: undefined,\r\n                onok: undefined,\r\n                label: undefined,\r\n            },\r\n            settingUpdated: function (key, oldValue, newValue) {\r\n                switch (key) {\r\n                case 'message':\r\n                    this.setMessage(newValue);\r\n                    break;\r\n                case 'label':\r\n                    if (this.__internal.buttons[0].element) {\r\n                        this.__internal.buttons[0].element.innerHTML = newValue;\r\n                    }\r\n                    break;\r\n                }\r\n            },\r\n            callback: function (closeEvent) {\r\n                if (typeof this.get('onok') === 'function') {\r\n                    var returnValue = this.get('onok').call(this, closeEvent);\r\n                    if (typeof returnValue !== 'undefined') {\r\n                        closeEvent.cancel = !returnValue;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    });\r\n    /**\r\n     * Confirm dialog object\r\n     *\r\n     *\talertify.confirm(message);\r\n     *\talertify.confirm(message, onok);\r\n     *\talertify.confirm(message, onok, oncancel);\r\n     *\talertify.confirm(title, message, onok, oncancel);\r\n     */\r\n    alertify.dialog('confirm', function () {\r\n\r\n        var autoConfirm = {\r\n            timer: null,\r\n            index: null,\r\n            text: null,\r\n            duration: null,\r\n            task: function (event, self) {\r\n                if (self.isOpen()) {\r\n                    self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text + ' (&#8207;' + autoConfirm.duration + '&#8207;) ';\r\n                    autoConfirm.duration -= 1;\r\n                    if (autoConfirm.duration === -1) {\r\n                        clearAutoConfirm(self);\r\n                        var button = self.__internal.buttons[autoConfirm.index];\r\n                        var closeEvent = createCloseEvent(autoConfirm.index, button);\r\n\r\n                        if (typeof self.callback === 'function') {\r\n                            self.callback.apply(self, [closeEvent]);\r\n                        }\r\n                        //close the dialog.\r\n                        if (closeEvent.close !== false) {\r\n                            self.close();\r\n                        }\r\n                    }\r\n                } else {\r\n                    clearAutoConfirm(self);\r\n                }\r\n            }\r\n        };\r\n\r\n        function clearAutoConfirm(self) {\r\n            if (autoConfirm.timer !== null) {\r\n                clearInterval(autoConfirm.timer);\r\n                autoConfirm.timer = null;\r\n                self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text;\r\n            }\r\n        }\r\n\r\n        function startAutoConfirm(self, index, duration) {\r\n            clearAutoConfirm(self);\r\n            autoConfirm.duration = duration;\r\n            autoConfirm.index = index;\r\n            autoConfirm.text = self.__internal.buttons[index].element.innerHTML;\r\n            autoConfirm.timer = setInterval(delegate(self, autoConfirm.task), 1000);\r\n            autoConfirm.task(null, self);\r\n        }\r\n\r\n\r\n        return {\r\n            main: function (_title, _message, _onok, _oncancel) {\r\n                var title, message, onok, oncancel;\r\n                switch (arguments.length) {\r\n                case 1:\r\n                    message = _title;\r\n                    break;\r\n                case 2:\r\n                    message = _title;\r\n                    onok = _message;\r\n                    break;\r\n                case 3:\r\n                    message = _title;\r\n                    onok = _message;\r\n                    oncancel = _onok;\r\n                    break;\r\n                case 4:\r\n                    title = _title;\r\n                    message = _message;\r\n                    onok = _onok;\r\n                    oncancel = _oncancel;\r\n                    break;\r\n                }\r\n                this.set('title', title);\r\n                this.set('message', message);\r\n                this.set('onok', onok);\r\n                this.set('oncancel', oncancel);\r\n                return this;\r\n            },\r\n            setup: function () {\r\n                return {\r\n                    buttons: [\r\n                        {\r\n                            text: alertify.defaults.glossary.ok,\r\n                            key: keys.ENTER,\r\n                            className: alertify.defaults.theme.ok,\r\n                        },\r\n                        {\r\n                            text: alertify.defaults.glossary.cancel,\r\n                            key: keys.ESC,\r\n                            invokeOnClose: true,\r\n                            className: alertify.defaults.theme.cancel,\r\n                        }\r\n                    ],\r\n                    focus: {\r\n                        element: 0,\r\n                        select: false\r\n                    },\r\n                    options: {\r\n                        maximizable: false,\r\n                        resizable: false\r\n                    }\r\n                };\r\n            },\r\n            build: function () {\r\n                //nothing\r\n            },\r\n            prepare: function () {\r\n                //nothing\r\n            },\r\n            setMessage: function (message) {\r\n                this.setContent(message);\r\n            },\r\n            settings: {\r\n                message: null,\r\n                labels: null,\r\n                onok: null,\r\n                oncancel: null,\r\n                defaultFocus: null,\r\n                reverseButtons: null,\r\n            },\r\n            settingUpdated: function (key, oldValue, newValue) {\r\n                switch (key) {\r\n                case 'message':\r\n                    this.setMessage(newValue);\r\n                    break;\r\n                case 'labels':\r\n                    if ('ok' in newValue && this.__internal.buttons[0].element) {\r\n                        this.__internal.buttons[0].text = newValue.ok;\r\n                        this.__internal.buttons[0].element.innerHTML = newValue.ok;\r\n                    }\r\n                    if ('cancel' in newValue && this.__internal.buttons[1].element) {\r\n                        this.__internal.buttons[1].text = newValue.cancel;\r\n                        this.__internal.buttons[1].element.innerHTML = newValue.cancel;\r\n                    }\r\n                    break;\r\n                case 'reverseButtons':\r\n                    if (newValue === true) {\r\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);\r\n                    } else {\r\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);\r\n                    }\r\n                    break;\r\n                case 'defaultFocus':\r\n                    this.__internal.focus.element = newValue === 'ok' ? 0 : 1;\r\n                    break;\r\n                }\r\n            },\r\n            callback: function (closeEvent) {\r\n                clearAutoConfirm(this);\r\n                var returnValue;\r\n                switch (closeEvent.index) {\r\n                case 0:\r\n                    if (typeof this.get('onok') === 'function') {\r\n                        returnValue = this.get('onok').call(this, closeEvent);\r\n                        if (typeof returnValue !== 'undefined') {\r\n                            closeEvent.cancel = !returnValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 1:\r\n                    if (typeof this.get('oncancel') === 'function') {\r\n                        returnValue = this.get('oncancel').call(this, closeEvent);\r\n                        if (typeof returnValue !== 'undefined') {\r\n                            closeEvent.cancel = !returnValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            },\r\n            autoOk: function (duration) {\r\n                startAutoConfirm(this, 0, duration);\r\n                return this;\r\n            },\r\n            autoCancel: function (duration) {\r\n                startAutoConfirm(this, 1, duration);\r\n                return this;\r\n            }\r\n        };\r\n    });\r\n    /**\r\n     * Prompt dialog object\r\n     *\r\n     * invoked by:\r\n     *\talertify.prompt(message);\r\n     *\talertify.prompt(message, value);\r\n     *\talertify.prompt(message, value, onok);\r\n     *\talertify.prompt(message, value, onok, oncancel);\r\n     *\talertify.prompt(title, message, value, onok, oncancel);\r\n     */\r\n    alertify.dialog('prompt', function () {\r\n        var input = document.createElement('INPUT');\r\n        var p = document.createElement('P');\r\n        return {\r\n            main: function (_title, _message, _value, _onok, _oncancel) {\r\n                var title, message, value, onok, oncancel;\r\n                switch (arguments.length) {\r\n                case 1:\r\n                    message = _title;\r\n                    break;\r\n                case 2:\r\n                    message = _title;\r\n                    value = _message;\r\n                    break;\r\n                case 3:\r\n                    message = _title;\r\n                    value = _message;\r\n                    onok = _value;\r\n                    break;\r\n                case 4:\r\n                    message = _title;\r\n                    value = _message;\r\n                    onok = _value;\r\n                    oncancel = _onok;\r\n                    break;\r\n                case 5:\r\n                    title = _title;\r\n                    message = _message;\r\n                    value = _value;\r\n                    onok = _onok;\r\n                    oncancel = _oncancel;\r\n                    break;\r\n                }\r\n                this.set('title', title);\r\n                this.set('message', message);\r\n                this.set('value', value);\r\n                this.set('onok', onok);\r\n                this.set('oncancel', oncancel);\r\n                return this;\r\n            },\r\n            setup: function () {\r\n                return {\r\n                    buttons: [\r\n                        {\r\n                            text: alertify.defaults.glossary.ok,\r\n                            key: keys.ENTER,\r\n                            className: alertify.defaults.theme.ok,\r\n                        },\r\n                        {\r\n                            text: alertify.defaults.glossary.cancel,\r\n                            key: keys.ESC,\r\n                            invokeOnClose: true,\r\n                            className: alertify.defaults.theme.cancel,\r\n                        }\r\n                    ],\r\n                    focus: {\r\n                        element: input,\r\n                        select: true\r\n                    },\r\n                    options: {\r\n                        maximizable: false,\r\n                        resizable: false\r\n                    }\r\n                };\r\n            },\r\n            build: function () {\r\n                input.className = alertify.defaults.theme.input;\r\n                input.setAttribute('type', 'text');\r\n                input.value = this.get('value');\r\n                this.elements.content.appendChild(p);\r\n                this.elements.content.appendChild(input);\r\n            },\r\n            prepare: function () {\r\n                //nothing\r\n            },\r\n            setMessage: function (message) {\r\n                if (typeof message === 'string') {\r\n                    clearContents(p);\r\n                    p.innerHTML = message;\r\n                } else if (message instanceof window.HTMLElement && p.firstChild !== message) {\r\n                    clearContents(p);\r\n                    p.appendChild(message);\r\n                }\r\n            },\r\n            settings: {\r\n                message: undefined,\r\n                labels: undefined,\r\n                onok: undefined,\r\n                oncancel: undefined,\r\n                value: '',\r\n                type:'text',\r\n                reverseButtons: undefined,\r\n            },\r\n            settingUpdated: function (key, oldValue, newValue) {\r\n                switch (key) {\r\n                case 'message':\r\n                    this.setMessage(newValue);\r\n                    break;\r\n                case 'value':\r\n                    input.value = newValue;\r\n                    break;\r\n                case 'type':\r\n                    switch (newValue) {\r\n                    case 'text':\r\n                    case 'color':\r\n                    case 'date':\r\n                    case 'datetime-local':\r\n                    case 'email':\r\n                    case 'month':\r\n                    case 'number':\r\n                    case 'password':\r\n                    case 'search':\r\n                    case 'tel':\r\n                    case 'time':\r\n                    case 'week':\r\n                        input.type = newValue;\r\n                        break;\r\n                    default:\r\n                        input.type = 'text';\r\n                        break;\r\n                    }\r\n                    break;\r\n                case 'labels':\r\n                    if (newValue.ok && this.__internal.buttons[0].element) {\r\n                        this.__internal.buttons[0].element.innerHTML = newValue.ok;\r\n                    }\r\n                    if (newValue.cancel && this.__internal.buttons[1].element) {\r\n                        this.__internal.buttons[1].element.innerHTML = newValue.cancel;\r\n                    }\r\n                    break;\r\n                case 'reverseButtons':\r\n                    if (newValue === true) {\r\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);\r\n                    } else {\r\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);\r\n                    }\r\n                    break;\r\n                }\r\n            },\r\n            callback: function (closeEvent) {\r\n                var returnValue;\r\n                switch (closeEvent.index) {\r\n                case 0:\r\n                    this.settings.value = input.value;\r\n                    if (typeof this.get('onok') === 'function') {\r\n                        returnValue = this.get('onok').call(this, closeEvent, this.settings.value);\r\n                        if (typeof returnValue !== 'undefined') {\r\n                            closeEvent.cancel = !returnValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 1:\r\n                    if (typeof this.get('oncancel') === 'function') {\r\n                        returnValue = this.get('oncancel').call(this, closeEvent);\r\n                        if (typeof returnValue !== 'undefined') {\r\n                            closeEvent.cancel = !returnValue;\r\n                        }\r\n                    }\r\n                    if(!closeEvent.cancel){\r\n                        input.value = this.settings.value;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n    });\r\n\r\n    // CommonJS\r\n    if ( typeof module === 'object' && typeof module.exports === 'object' ) {\r\n        module.exports = alertify;\r\n    // AMD\r\n    } else if ( typeof define === 'function' && define.amd) {\r\n        define( [], function () {\r\n            return alertify;\r\n        } );\r\n    // window\r\n    } else if ( !window.alertify ) {\r\n        window.alertify = alertify;\r\n    }\r\n\r\n} ( typeof window !== 'undefined' ? window : this ) );\r\n"],"names":["window","NOT_DISABLED_NOT_RESET","keys","defaults","autoReset","basic","closable","closableByDimmer","invokeOnCloseOff","frameless","defaultFocusOff","maintainFocus","maximizable","modal","movable","moveBounded","transition","base","prefix","message","top","right","bottom","left","center","visible","hidden","close","title","ok","cancel","acccpt","deny","confirm","decline","maximize","restore","theme","input","hooks","preinit","postinit","addClass","element","classNames","className","removeClass","original","split","toBeRemoved","x","length","index","indexOf","splice","join","isRightToLeft","getComputedStyle","document","body","direction","getScrollTop","documentElement","scrollTop","getScrollLeft","scrollLeft","clearContents","lastChild","removeChild","copy","src","cpy","Array","isArray","push","Date","getTime","RegExp","source","global","ignoreCase","multiline","lastIndex","prop","hasOwnProperty","destruct","instance","initialize","elements","root","parentNode","settings","__settings","__init","__internal","Object","defineProperty","get","IsPassiveSupported","addEventListener","options","removeEventListener","e","on","el","event","fn","useCapture","passive","capture","t","type","supported","transitions","animation","OAnimation","msAnimation","MozAnimation","WebkitAnimation","undefined","style","context","method","args","arguments","apply","createCloseEvent","button","eventType","call","scrollY","navigator","userAgent","setup","alertify","focus","buttons","select","buttonsDefinition","b","ref","i","internal","isOpen","activeElement","timerIn","timerOut","pinned","resizable","startMaximized","pinnable","transitionOff","padding","overflow","onshow","onclosing","onclose","onfocus","onmove","onmoved","onresize","onresized","onmaximize","onmaximized","onrestore","onrestored","resetHandler","beginMoveHandler","beginResizeHandler","bringToFrontHandler","modalClickHandler","buttonsClickHandler","commandsClickHandler","transitionInHandler","transitionOutHandler","destroy","createElement","display","classes","innerHTML","templates","dimmer","firstChild","dialog","reset","commands","container","nextSibling","pin","header","content","footer","auxiliary","primary","resizeHandle","buttonTemplate","key","usedKeys","cloneNode","text","attrs","setAttribute","scope","appendChild","opKey","delegate","onReset","beginMove","beginResize","bringToFront","handleTransitionInEvent","handleTransitionOutEvent","set","glossary","build","scrollX","ensureNoOverflow","openDialogs","isModal","isMaximized","requiresNoOverflow","preventBodyShift","topScroll","add","scrollHeight","clientHeight","top1","restoreScrollPosition","setFocus","optionUpdated","option","oldValue","newValue","setHeader","updateAbsPositionFix","updateDisplayMode","updateBasicMode","updateFramelessMode","removeAbsPositionFix","addAbsPositionFix","updatePinned","bindClosableEvents","off","unbindClosableEvents","updateClosable","updateMaximizable","updatePinnable","bindMovableEvents","unbindMovableEvents","updateMovable","bindResizableEvents","unbindResizableEvents","updateResizable","value","offsetWidth","updateTransition","updateTransitionOff","onupdate","update","obj","callback","old","result","op","found","items","Error","triggerClose","invokeOnClose","srcElement","target","isPinned","unpin","dispatchEvent","marginTop","marginLeft","marginRight","parseInt","modalClickHandlerTS","timeStamp","cancelClick","cancelKeyup","triggerCallback","check","now","callbackTS","idx","disabled","closeEvent","keyupHandler","keyCode","keydownHandler","preventDefault","stopPropagation","resetTarget","querySelector","firstReset","lastReset","lastFocusedElement","relatedTarget","within","contains","findTabbable","last","tabbables","slice","querySelectorAll","tabbable","reverse","offsetParent","offsetHeight","getClientRects","recycleTab","shiftKey","clearTimeout","resetResize","xProp","yProp","bounds","refreshTop","moveDelegate","moveElement","offsetX","offsetY","moveElementBounded","Math","min","maxLeft","max","minLeft","maxTop","minTop","eventSrc","targetTouches","current","offsetLeft","offsetTop","move","endMove","resetMove","Number","Nan","height","minHeight","width","startingWidth","maxWidth","minWidth","resize","pageRelative","pageX","pageY","clientX","clientY","isRTL","X","startingLeft","Y","handleOffset","abs","diff","resizeElement","endResize","windowResize","bindModelessEvents","this","moveTo","y","isNaN","h","parseFloat","regex","match","w","clientWidth","k","o","n","self","settingUpdated","item","setting","HTMLElement","showModal","show","hasAttribute","tabindex","prepare","removeAttribute","setTimeout","isSafari","unbindModelessEvents","closeOthers","closeAll","openInstances","notifier","baseClass","initialize1","position","delay","pushed","div","closeButton","getAttribute","dismiss","transitionDone","clearTimers","timer","transitionTimeout","_content","_wait","wait","pushInstance","setContent","insertBefore","clickHandler","ondismiss","clicked","transitionEndHandler","clickDelegate"],"version":3,"file":"saque.e44c0353.js.map"}