{"mappings":"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","sources":["./node_modules/alertifyjs/build/alertify.js"],"sourcesContent":["/**\r\n * alertifyjs 1.13.1 http://alertifyjs.com\r\n * AlertifyJS is a javascript framework for developing pretty browser dialogs and notifications.\r\n * Copyright 2019 Mohammad Younes <Mohammad@alertifyjs.com> (http://alertifyjs.com) \r\n * Licensed under GPL 3 <https://opensource.org/licenses/gpl-3.0>*/\r\n( function ( window ) {\r\n    'use strict';\r\n    var NOT_DISABLED_NOT_RESET = ':not(:disabled):not(.ajs-reset)';\r\n    /**\r\n     * Keys enum\r\n     * @type {Object}\r\n     */\r\n    var keys = {\r\n        ENTER: 13,\r\n        ESC: 27,\r\n        F1: 112,\r\n        F12: 123,\r\n        LEFT: 37,\r\n        RIGHT: 39,\r\n        TAB: 9\r\n    };\r\n    /**\r\n     * Default options \r\n     * @type {Object}\r\n     */\r\n    var defaults = {\r\n        autoReset:true,\r\n        basic:false,\r\n        closable:true,\r\n        closableByDimmer:true,\r\n        invokeOnCloseOff:false,\r\n        frameless:false,\r\n        defaultFocusOff:false,\r\n        maintainFocus:true, //global default not per instance, applies to all dialogs\r\n        maximizable:true,\r\n        modal:true,\r\n        movable:true,\r\n        moveBounded:false,\r\n        overflow:true,\r\n        padding: true,\r\n        pinnable:true,\r\n        pinned:true,\r\n        preventBodyShift:false, //global default not per instance, applies to all dialogs\r\n        resizable:true,\r\n        startMaximized:false,\r\n        transition:'pulse',\r\n        transitionOff:false,\r\n        tabbable:['button', '[href]', 'input', 'select', 'textarea', '[tabindex]:not([tabindex^=\"-\"])'+NOT_DISABLED_NOT_RESET].join(NOT_DISABLED_NOT_RESET+','),//global\r\n        notifier:{\r\n            delay:5,\r\n            position:'bottom-right',\r\n            closeButton:false,\r\n            classes: {\r\n                base: 'alertify-notifier',\r\n                prefix:'ajs-',\r\n                message: 'ajs-message',\r\n                top: 'ajs-top',\r\n                right: 'ajs-right',\r\n                bottom: 'ajs-bottom',\r\n                left: 'ajs-left',\r\n                center: 'ajs-center',\r\n                visible: 'ajs-visible',\r\n                hidden: 'ajs-hidden',\r\n                close: 'ajs-close'\r\n            }\r\n        },\r\n        glossary:{\r\n            title:'AlertifyJS',\r\n            ok: 'OK',\r\n            cancel: 'Cancel',\r\n            acccpt: 'Accept',\r\n            deny: 'Deny',\r\n            confirm: 'Confirm',\r\n            decline: 'Decline',\r\n            close: 'Close',\r\n            maximize: 'Maximize',\r\n            restore: 'Restore',\r\n        },\r\n        theme:{\r\n            input:'ajs-input',\r\n            ok:'ajs-ok',\r\n            cancel:'ajs-cancel',\r\n        },\r\n        hooks:{\r\n            preinit:function(){},\r\n            postinit:function(){}\r\n        }\r\n    };\r\n    \r\n    //holds open dialogs instances\r\n    var openDialogs = [];\r\n\r\n    /**\r\n     * [Helper]  Adds the specified class(es) to the element.\r\n     *\r\n     * @element {node}      The element\r\n     * @className {string}  One or more space-separated classes to be added to the class attribute of the element.\r\n     * \r\n     * @return {undefined}\r\n     */\r\n    function addClass(element,classNames){\r\n        element.className += ' ' + classNames;\r\n    }\r\n    \r\n    /**\r\n     * [Helper]  Removes the specified class(es) from the element.\r\n     *\r\n     * @element {node}      The element\r\n     * @className {string}  One or more space-separated classes to be removed from the class attribute of the element.\r\n     * \r\n     * @return {undefined}\r\n     */\r\n    function removeClass(element, classNames) {\r\n        var original = element.className.split(' ');\r\n        var toBeRemoved = classNames.split(' ');\r\n        for (var x = 0; x < toBeRemoved.length; x += 1) {\r\n            var index = original.indexOf(toBeRemoved[x]);\r\n            if (index > -1){\r\n                original.splice(index,1);\r\n            }\r\n        }\r\n        element.className = original.join(' ');\r\n    }\r\n\r\n    /**\r\n     * [Helper]  Checks if the document is RTL\r\n     *\r\n     * @return {Boolean} True if the document is RTL, false otherwise.\r\n     */\r\n    function isRightToLeft(){\r\n        return window.getComputedStyle(document.body).direction === 'rtl';\r\n    }\r\n    /**\r\n     * [Helper]  Get the document current scrollTop\r\n     *\r\n     * @return {Number} current document scrollTop value\r\n     */\r\n    function getScrollTop(){\r\n        return ((document.documentElement && document.documentElement.scrollTop) || document.body.scrollTop);\r\n    }\r\n\r\n    /**\r\n     * [Helper]  Get the document current scrollLeft\r\n     *\r\n     * @return {Number} current document scrollLeft value\r\n     */\r\n    function getScrollLeft(){\r\n        return ((document.documentElement && document.documentElement.scrollLeft) || document.body.scrollLeft);\r\n    }\r\n\r\n    /**\r\n    * Helper: clear contents\r\n    *\r\n    */\r\n    function clearContents(element){\r\n        while (element.lastChild) {\r\n            element.removeChild(element.lastChild);\r\n        }\r\n    }\r\n    /**\r\n     * Extends a given prototype by merging properties from base into sub.\r\n     *\r\n     * @sub {Object} sub The prototype being overwritten.\r\n     * @base {Object} base The prototype being written.\r\n     *\r\n     * @return {Object} The extended prototype.\r\n     */\r\n    function copy(src) {\r\n        if(null === src){\r\n            return src;\r\n        }\r\n        var cpy;\r\n        if(Array.isArray(src)){\r\n            cpy = [];\r\n            for(var x=0;x<src.length;x+=1){\r\n                cpy.push(copy(src[x]));\r\n            }\r\n            return cpy;\r\n        }\r\n      \r\n        if(src instanceof Date){\r\n            return new Date(src.getTime());\r\n        }\r\n      \r\n        if(src instanceof RegExp){\r\n            cpy = new RegExp(src.source);\r\n            cpy.global = src.global;\r\n            cpy.ignoreCase = src.ignoreCase;\r\n            cpy.multiline = src.multiline;\r\n            cpy.lastIndex = src.lastIndex;\r\n            return cpy;\r\n        }\r\n        \r\n        if(typeof src === 'object'){\r\n            cpy = {};\r\n            // copy dialog pototype over definition.\r\n            for (var prop in src) {\r\n                if (src.hasOwnProperty(prop)) {\r\n                    cpy[prop] = copy(src[prop]);\r\n                }\r\n            }\r\n            return cpy;\r\n        }\r\n        return src;\r\n    }\r\n    /**\r\n      * Helper: destruct the dialog\r\n      *\r\n      */\r\n    function destruct(instance, initialize){\r\n        if(instance.elements){\r\n            //delete the dom and it's references.\r\n            var root = instance.elements.root;\r\n            root.parentNode.removeChild(root);\r\n            delete instance.elements;\r\n            //copy back initial settings.\r\n            instance.settings = copy(instance.__settings);\r\n            //re-reference init function.\r\n            instance.__init = initialize;\r\n            //delete __internal variable to allow re-initialization.\r\n            delete instance.__internal;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Test to check if passive event listeners are supported.\r\n     */\r\n    var IsPassiveSupported = false;\r\n    try {\r\n        var options = Object.defineProperty({}, 'passive', {\r\n            get: function () {\r\n                IsPassiveSupported = true;\r\n            }\r\n        });\r\n        window.addEventListener('test', options, options);\r\n        window.removeEventListener('test', options, options);\r\n    } catch (e) {}\r\n\r\n     /**\r\n     * Removes an event listener\r\n     *\r\n     * @param {HTMLElement} el The EventTarget to register the listenr on.\r\n     * @param {string} event The event type to listen for.\r\n     * @param {Function} handler The function to handle the event.\r\n     * @param {boolean} useCapture Specifices if the event to be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree.\r\n     * @param {boolean} passive A Boolean which, if true, indicates that the function specified by listener will never call preventDefault().\r\n     */\r\n    var on = function (el, event, fn, useCapture, passive) {\r\n        el.addEventListener(event, fn, IsPassiveSupported ? { capture: useCapture, passive: passive } : useCapture === true);\r\n    };\r\n\r\n    /**\r\n     * Removes an event listener\r\n     *\r\n     * @param {HTMLElement} el The EventTarget to unregister the listenr from.\r\n     * @param {string} event The event type to remove.\r\n     * @param {Function} fn The event handler to remove.\r\n     * @param {boolean} useCapture Specifices if the event to be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree.\r\n     * @param {boolean} passive A Boolean which, if true, indicates that the function specified by listener will never call preventDefault().\r\n     */\r\n    var off = function (el, event, fn, useCapture, passive) {\r\n        el.removeEventListener(event, fn, IsPassiveSupported ? { capture: useCapture, passive: passive } : useCapture === true);\r\n    };\r\n\r\n    /**\r\n     * Prevent default event from firing\r\n     *\r\n     * @param  {Event} event Event object\r\n     * @return {undefined}\r\n\r\n    function prevent ( event ) {\r\n        if ( event ) {\r\n            if ( event.preventDefault ) {\r\n                event.preventDefault();\r\n            } else {\r\n                event.returnValue = false;\r\n            }\r\n        }\r\n    }\r\n    */\r\n    var transition = (function () {\r\n        var t, type;\r\n        var supported = false;\r\n        var transitions = {\r\n            'animation'        : 'animationend',\r\n            'OAnimation'       : 'oAnimationEnd oanimationend',\r\n            'msAnimation'      : 'MSAnimationEnd',\r\n            'MozAnimation'     : 'animationend',\r\n            'WebkitAnimation'  : 'webkitAnimationEnd'\r\n        };\r\n\r\n        for (t in transitions) {\r\n            if (document.documentElement.style[t] !== undefined) {\r\n                type = transitions[t];\r\n                supported = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return {\r\n            type: type,\r\n            supported: supported\r\n        };\r\n    }());\r\n\r\n    /**\r\n    * Creates event handler delegate that sends the instance as last argument.\r\n    * \r\n    * @return {Function}    a function wrapper which sends the instance as last argument.\r\n    */\r\n    function delegate(context, method) {\r\n        return function () {\r\n            if (arguments.length > 0) {\r\n                var args = [];\r\n                for (var x = 0; x < arguments.length; x += 1) {\r\n                    args.push(arguments[x]);\r\n                }\r\n                args.push(context);\r\n                return method.apply(context, args);\r\n            }\r\n            return method.apply(context, [null, context]);\r\n        };\r\n    }\r\n    /**\r\n    * Helper for creating a dialog close event.\r\n    * \r\n    * @return {object}\r\n    */\r\n    function createCloseEvent(index, button) {\r\n        return {\r\n            index: index,\r\n            button: button,\r\n            cancel: false\r\n        };\r\n    }\r\n    /**\r\n    * Helper for dispatching events.\r\n    *\r\n    * @param  {string} evenType The type of the event to disptach.\r\n    * @param  {object} instance The dialog instance disptaching the event.\r\n    *\r\n    * @return   {any}   The result of the invoked function.\r\n    */\r\n    function dispatchEvent(eventType, instance) {\r\n        if ( typeof instance.get(eventType) === 'function' ) {\r\n            return instance.get(eventType).call(instance);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Super class for all dialogs\r\n     *\r\n     * @return {Object}\t\tbase dialog prototype\r\n     */\r\n    var dialog = (function () {\r\n        var //holds the list of used keys.\r\n            usedKeys = [],\r\n            //dummy variable, used to trigger dom reflow.\r\n            reflow = null,\r\n            //holds body tab index in case it has any.\r\n            tabindex = false,\r\n            //condition for detecting safari\r\n            isSafari = window.navigator.userAgent.indexOf('Safari') > -1 && window.navigator.userAgent.indexOf('Chrome') < 0,\r\n            //dialog building blocks\r\n            templates = {\r\n                dimmer:'<div class=\"ajs-dimmer\"></div>',\r\n                /*tab index required to fire click event before body focus*/\r\n                modal: '<div class=\"ajs-modal\" tabindex=\"0\"></div>',\r\n                dialog: '<div class=\"ajs-dialog\" tabindex=\"0\"></div>',\r\n                reset: '<button class=\"ajs-reset\"></button>',\r\n                commands: '<div class=\"ajs-commands\"><button class=\"ajs-pin\"></button><button class=\"ajs-maximize\"></button><button class=\"ajs-close\"></button></div>',\r\n                header: '<div class=\"ajs-header\"></div>',\r\n                body: '<div class=\"ajs-body\"></div>',\r\n                content: '<div class=\"ajs-content\"></div>',\r\n                footer: '<div class=\"ajs-footer\"></div>',\r\n                buttons: { primary: '<div class=\"ajs-primary ajs-buttons\"></div>', auxiliary: '<div class=\"ajs-auxiliary ajs-buttons\"></div>' },\r\n                button: '<button class=\"ajs-button\"></button>',\r\n                resizeHandle: '<div class=\"ajs-handle\"></div>',\r\n            },\r\n            //common class names\r\n            classes = {\r\n                animationIn: 'ajs-in',\r\n                animationOut: 'ajs-out',\r\n                base: 'alertify',\r\n                basic:'ajs-basic',\r\n                capture: 'ajs-capture',\r\n                closable:'ajs-closable',\r\n                fixed: 'ajs-fixed',\r\n                frameless:'ajs-frameless',\r\n                hidden: 'ajs-hidden',\r\n                maximize: 'ajs-maximize',\r\n                maximized: 'ajs-maximized',\r\n                maximizable:'ajs-maximizable',\r\n                modeless: 'ajs-modeless',\r\n                movable: 'ajs-movable',\r\n                noSelection: 'ajs-no-selection',\r\n                noOverflow: 'ajs-no-overflow',\r\n                noPadding:'ajs-no-padding',\r\n                pin:'ajs-pin',\r\n                pinnable:'ajs-pinnable',\r\n                prefix: 'ajs-',\r\n                resizable: 'ajs-resizable',\r\n                restore: 'ajs-restore',\r\n                shake:'ajs-shake',\r\n                unpinned:'ajs-unpinned',\r\n                noTransition:'ajs-no-transition'\r\n            };\r\n\r\n        /**\r\n         * Helper: initializes the dialog instance\r\n         * \r\n         * @return\t{Number}\tThe total count of currently open modals.\r\n         */\r\n        function initialize(instance){\r\n            \r\n            if(!instance.__internal){\r\n                //invoke preinit global hook\r\n                alertify.defaults.hooks.preinit(instance);\r\n                //no need to expose init after this.\r\n                delete instance.__init;\r\n              \r\n                //keep a copy of initial dialog settings\r\n                if(!instance.__settings){\r\n                    instance.__settings = copy(instance.settings);\r\n                }\r\n                \r\n                //get dialog buttons/focus setup\r\n                var setup;\r\n                if(typeof instance.setup === 'function'){\r\n                    setup = instance.setup();\r\n                    setup.options = setup.options  || {};\r\n                    setup.focus = setup.focus  || {};\r\n                }else{\r\n                    setup = {\r\n                        buttons:[],\r\n                        focus:{\r\n                            element:null,\r\n                            select:false\r\n                        },\r\n                        options:{\r\n                        }\r\n                    };\r\n                }\r\n                \r\n                //initialize hooks object.\r\n                if(typeof instance.hooks !== 'object'){\r\n                    instance.hooks = {};\r\n                }\r\n\r\n                //copy buttons defintion\r\n                var buttonsDefinition = [];\r\n                if(Array.isArray(setup.buttons)){\r\n                    for(var b=0;b<setup.buttons.length;b+=1){\r\n                        var ref  = setup.buttons[b],\r\n                            cpy = {};\r\n                        for (var i in ref) {\r\n                            if (ref.hasOwnProperty(i)) {\r\n                                cpy[i] = ref[i];\r\n                            }\r\n                        }\r\n                        buttonsDefinition.push(cpy);\r\n                    }\r\n                }\r\n\r\n                var internal = instance.__internal = {\r\n                    /**\r\n                     * Flag holding the open state of the dialog\r\n                     * \r\n                     * @type {Boolean}\r\n                     */\r\n                    isOpen:false,\r\n                    /**\r\n                     * Active element is the element that will receive focus after\r\n                     * closing the dialog. It defaults as the body tag, but gets updated\r\n                     * to the last focused element before the dialog was opened.\r\n                     *\r\n                     * @type {Node}\r\n                     */\r\n                    activeElement:document.body,\r\n                    timerIn:undefined,\r\n                    timerOut:undefined,\r\n                    buttons: buttonsDefinition,\r\n                    focus: setup.focus,\r\n                    options: {\r\n                        title: undefined,\r\n                        modal: undefined,\r\n                        basic:undefined,\r\n                        frameless:undefined,\r\n                        defaultFocusOff:undefined,\r\n                        pinned: undefined,\r\n                        movable: undefined,\r\n                        moveBounded:undefined,\r\n                        resizable: undefined,\r\n                        autoReset: undefined,\r\n                        closable: undefined,\r\n                        closableByDimmer: undefined,\r\n                        invokeOnCloseOff:undefined,\r\n                        maximizable: undefined,\r\n                        startMaximized: undefined,\r\n                        pinnable: undefined,\r\n                        transition: undefined,\r\n                        transitionOff: undefined,\r\n                        padding:undefined,\r\n                        overflow:undefined,\r\n                        onshow:undefined,\r\n                        onclosing:undefined,\r\n                        onclose:undefined,\r\n                        onfocus:undefined,\r\n                        onmove:undefined,\r\n                        onmoved:undefined,\r\n                        onresize:undefined,\r\n                        onresized:undefined,\r\n                        onmaximize:undefined,\r\n                        onmaximized:undefined,\r\n                        onrestore:undefined,\r\n                        onrestored:undefined\r\n                    },\r\n                    resetHandler:undefined,\r\n                    beginMoveHandler:undefined,\r\n                    beginResizeHandler:undefined,\r\n                    bringToFrontHandler:undefined,\r\n                    modalClickHandler:undefined,\r\n                    buttonsClickHandler:undefined,\r\n                    commandsClickHandler:undefined,\r\n                    transitionInHandler:undefined,\r\n                    transitionOutHandler:undefined,\r\n                    destroy:undefined\r\n                };\r\n\r\n                var elements = {};\r\n                //root node\r\n                elements.root = document.createElement('div');\r\n                //prevent FOUC in case of async styles loading.\r\n                elements.root.style.display = 'none';\r\n                elements.root.className = classes.base + ' ' + classes.hidden + ' ';\r\n\r\n                elements.root.innerHTML = templates.dimmer + templates.modal;\r\n                \r\n                //dimmer\r\n                elements.dimmer = elements.root.firstChild;\r\n\r\n                //dialog\r\n                elements.modal = elements.root.lastChild;\r\n                elements.modal.innerHTML = templates.dialog;\r\n                elements.dialog = elements.modal.firstChild;\r\n                elements.dialog.innerHTML = templates.reset + templates.commands + templates.header + templates.body + templates.footer + templates.resizeHandle + templates.reset;\r\n\r\n                //reset links\r\n                elements.reset = [];\r\n                elements.reset.push(elements.dialog.firstChild);\r\n                elements.reset.push(elements.dialog.lastChild);\r\n                \r\n                //commands\r\n                elements.commands = {};\r\n                elements.commands.container = elements.reset[0].nextSibling;\r\n                elements.commands.pin = elements.commands.container.firstChild;\r\n                elements.commands.maximize = elements.commands.pin.nextSibling;\r\n                elements.commands.close = elements.commands.maximize.nextSibling;\r\n                \r\n                //header\r\n                elements.header = elements.commands.container.nextSibling;\r\n\r\n                //body\r\n                elements.body = elements.header.nextSibling;\r\n                elements.body.innerHTML = templates.content;\r\n                elements.content = elements.body.firstChild;\r\n\r\n                //footer\r\n                elements.footer = elements.body.nextSibling;\r\n                elements.footer.innerHTML = templates.buttons.auxiliary + templates.buttons.primary;\r\n                \r\n                //resize handle\r\n                elements.resizeHandle = elements.footer.nextSibling;\r\n\r\n                //buttons\r\n                elements.buttons = {};\r\n                elements.buttons.auxiliary = elements.footer.firstChild;\r\n                elements.buttons.primary = elements.buttons.auxiliary.nextSibling;\r\n                elements.buttons.primary.innerHTML = templates.button;\r\n                elements.buttonTemplate = elements.buttons.primary.firstChild;\r\n                //remove button template\r\n                elements.buttons.primary.removeChild(elements.buttonTemplate);\r\n                               \r\n                for(var x=0; x < instance.__internal.buttons.length; x+=1) {\r\n                    var button = instance.__internal.buttons[x];\r\n                    \r\n                    // add to the list of used keys.\r\n                    if(usedKeys.indexOf(button.key) < 0){\r\n                        usedKeys.push(button.key);\r\n                    }\r\n\r\n                    button.element = elements.buttonTemplate.cloneNode();\r\n                    button.element.innerHTML = button.text;\r\n                    if(typeof button.className === 'string' &&  button.className !== ''){\r\n                        addClass(button.element, button.className);\r\n                    }\r\n                    for(var key in button.attrs){\r\n                        if(key !== 'className' && button.attrs.hasOwnProperty(key)){\r\n                            button.element.setAttribute(key, button.attrs[key]);\r\n                        }\r\n                    }\r\n                    if(button.scope === 'auxiliary'){\r\n                        elements.buttons.auxiliary.appendChild(button.element);\r\n                    }else{\r\n                        elements.buttons.primary.appendChild(button.element);\r\n                    }\r\n                }\r\n                //make elements pubic\r\n                instance.elements = elements;\r\n                \r\n                //save event handlers delegates\r\n                internal.resetHandler = delegate(instance, onReset);\r\n                internal.beginMoveHandler = delegate(instance, beginMove);\r\n                internal.beginResizeHandler = delegate(instance, beginResize);\r\n                internal.bringToFrontHandler = delegate(instance, bringToFront);\r\n                internal.modalClickHandler = delegate(instance, modalClickHandler);\r\n                internal.buttonsClickHandler = delegate(instance, buttonsClickHandler);\r\n                internal.commandsClickHandler = delegate(instance, commandsClickHandler);\r\n                internal.transitionInHandler = delegate(instance, handleTransitionInEvent);\r\n                internal.transitionOutHandler = delegate(instance, handleTransitionOutEvent);\r\n\r\n                //settings\r\n                for(var opKey in internal.options){\r\n                    if(setup.options[opKey] !== undefined){\r\n                        // if found in user options\r\n                        instance.set(opKey, setup.options[opKey]);\r\n                    }else if(alertify.defaults.hasOwnProperty(opKey)) {\r\n                        // else if found in defaults options\r\n                        instance.set(opKey, alertify.defaults[opKey]);\r\n                    }else if(opKey === 'title' ) {\r\n                        // else if title key, use alertify.defaults.glossary\r\n                        instance.set(opKey, alertify.defaults.glossary[opKey]);\r\n                    }\r\n                }\r\n\r\n                // allow dom customization\r\n                if(typeof instance.build === 'function'){\r\n                    instance.build();\r\n                }\r\n\r\n                //invoke postinit global hook\r\n                alertify.defaults.hooks.postinit(instance);\r\n            }\r\n\r\n            //add to the end of the DOM tree.\r\n            document.body.appendChild(instance.elements.root);\r\n        }\r\n\r\n        /**\r\n         * Helper: maintains scroll position\r\n         *\r\n         */\r\n        var scrollX, scrollY;\r\n        function saveScrollPosition(){\r\n            scrollX = getScrollLeft();\r\n            scrollY = getScrollTop();\r\n        }\r\n        function restoreScrollPosition(){\r\n            window.scrollTo(scrollX, scrollY);\r\n        }\r\n\r\n        /**\r\n         * Helper: adds/removes no-overflow class from body\r\n         *\r\n         */\r\n        function ensureNoOverflow(){\r\n            var requiresNoOverflow = 0;\r\n            for(var x=0;x<openDialogs.length;x+=1){\r\n                var instance = openDialogs[x];\r\n                if(instance.isModal() || instance.isMaximized()){\r\n                    requiresNoOverflow+=1;\r\n                }\r\n            }\r\n            if(requiresNoOverflow === 0 && document.body.className.indexOf(classes.noOverflow) >= 0){\r\n                //last open modal or last maximized one\r\n                removeClass(document.body, classes.noOverflow);\r\n                preventBodyShift(false);\r\n            }else if(requiresNoOverflow > 0 && document.body.className.indexOf(classes.noOverflow) < 0){\r\n                //first open modal or first maximized one\r\n                preventBodyShift(true);\r\n                addClass(document.body, classes.noOverflow);\r\n            }\r\n        }\r\n        var top = '', topScroll = 0;\r\n        /**\r\n         * Helper: prevents body shift.\r\n         *\r\n         */\r\n        function preventBodyShift(add){\r\n            if(alertify.defaults.preventBodyShift){\r\n                if(add && document.documentElement.scrollHeight > document.documentElement.clientHeight ){//&& openDialogs[openDialogs.length-1].elements.dialog.clientHeight <= document.documentElement.clientHeight){\r\n                    topScroll = scrollY;\r\n                    top = window.getComputedStyle(document.body).top;\r\n                    addClass(document.body, classes.fixed);\r\n                    document.body.style.top = -scrollY + 'px';\r\n                } else if(!add) {\r\n                    scrollY = topScroll;\r\n                    document.body.style.top = top;\r\n                    removeClass(document.body, classes.fixed);\r\n                    restoreScrollPosition();\r\n                }\r\n            }\r\n        }\r\n\t\t\r\n        /**\r\n         * Sets the name of the transition used to show/hide the dialog\r\n         * \r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         */\r\n        function updateTransition(instance, value, oldValue){\r\n            if(typeof oldValue === 'string'){\r\n                removeClass(instance.elements.root,classes.prefix +  oldValue);\r\n            }\r\n            addClass(instance.elements.root, classes.prefix + value);\r\n            reflow = instance.elements.root.offsetWidth;\r\n        }\r\n\r\n        /**\r\n         * Toggles the dialog no transition \r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateTransitionOff(instance){\r\n            if (instance.get('transitionOff')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.noTransition);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.noTransition);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Toggles the dialog display mode\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateDisplayMode(instance){\r\n            if(instance.get('modal')){\r\n\r\n                //make modal\r\n                removeClass(instance.elements.root, classes.modeless);\r\n\r\n                //only if open\r\n                if(instance.isOpen()){\r\n                    unbindModelessEvents(instance);\r\n\r\n                    //in case a pinned modless dialog was made modal while open.\r\n                    updateAbsPositionFix(instance);\r\n\r\n                    ensureNoOverflow();\r\n                }\r\n            }else{\r\n                //make modelss\r\n                addClass(instance.elements.root, classes.modeless);\r\n\r\n                //only if open\r\n                if(instance.isOpen()){\r\n                    bindModelessEvents(instance);\r\n\r\n                    //in case pin/unpin was called while a modal is open\r\n                    updateAbsPositionFix(instance);\r\n\r\n                    ensureNoOverflow();\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Toggles the dialog basic view mode \r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateBasicMode(instance){\r\n            if (instance.get('basic')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.basic);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.basic);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Toggles the dialog frameless view mode \r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateFramelessMode(instance){\r\n            if (instance.get('frameless')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.frameless);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.frameless);\r\n            }\r\n        }\r\n\t\t\r\n        /**\r\n         * Helper: Brings the modeless dialog to front, attached to modeless dialogs.\r\n         *\r\n         * @param {Event} event Focus event\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bringToFront(event, instance){\r\n            \r\n            // Do not bring to front if preceeded by an open modal\r\n            var index = openDialogs.indexOf(instance);\r\n            for(var x=index+1;x<openDialogs.length;x+=1){\r\n                if(openDialogs[x].isModal()){\r\n                    return;\r\n                }\r\n            }\r\n\t\t\t\r\n            // Bring to front by making it the last child.\r\n            if(document.body.lastChild !== instance.elements.root){\r\n                document.body.appendChild(instance.elements.root);\r\n                //also make sure its at the end of the list\r\n                openDialogs.splice(openDialogs.indexOf(instance),1);\r\n                openDialogs.push(instance);\r\n                setFocus(instance);\r\n            }\r\n\t\t\t\r\n            return false;\r\n        }\r\n\t\t\r\n        /**\r\n         * Helper: reflects dialogs options updates\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {String} option The updated option name.\r\n         *\r\n         * @return\t{undefined}\t\r\n         */\r\n        function optionUpdated(instance, option, oldValue, newValue){\r\n            switch(option){\r\n            case 'title':\r\n                instance.setHeader(newValue);\r\n                break;\r\n            case 'modal':\r\n                updateDisplayMode(instance);\r\n                break;\r\n            case 'basic':\r\n                updateBasicMode(instance);\r\n                break;\r\n            case 'frameless':\r\n                updateFramelessMode(instance);\r\n                break;\r\n            case 'pinned':\r\n                updatePinned(instance);\r\n                break;\r\n            case 'closable':\r\n                updateClosable(instance);\r\n                break;\r\n            case 'maximizable':\r\n                updateMaximizable(instance);\r\n                break;\r\n            case 'pinnable':\r\n                updatePinnable(instance);\r\n                break;\r\n            case 'movable':\r\n                updateMovable(instance);\r\n                break;\r\n            case 'resizable':\r\n                updateResizable(instance);\r\n                break;\r\n            case 'padding':\r\n                if(newValue){\r\n                    removeClass(instance.elements.root, classes.noPadding);\r\n                }else if(instance.elements.root.className.indexOf(classes.noPadding) < 0){\r\n                    addClass(instance.elements.root, classes.noPadding);\r\n                }\r\n                break;\r\n            case 'overflow':\r\n                if(newValue){\r\n                    removeClass(instance.elements.root, classes.noOverflow);\r\n                }else if(instance.elements.root.className.indexOf(classes.noOverflow) < 0){\r\n                    addClass(instance.elements.root, classes.noOverflow);\r\n                }\r\n                break;\r\n            case 'transition':\r\n                updateTransition(instance,newValue, oldValue);\r\n                break;\r\n            case 'transitionOff':\r\n                updateTransitionOff(instance);\r\n                break;\r\n            }\r\n\r\n            // internal on option updated event\r\n            if(typeof instance.hooks.onupdate === 'function'){\r\n                instance.hooks.onupdate.call(instance, option, oldValue, newValue);\r\n            }\r\n        }\r\n\t\t\r\n        /**\r\n         * Helper: reflects dialogs options updates\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Object} obj The object to set/get a value on/from.\r\n         * @param {Function} callback The callback function to call if the key was found.\r\n         * @param {String|Object} key A string specifying a propery name or a collection of key value pairs.\r\n         * @param {Object} value Optional, the value associated with the key (in case it was a string).\r\n         * @param {String} option The updated option name.\r\n         *\r\n         * @return\t{Object} result object \r\n         *\tThe result objects has an 'op' property, indicating of this is a SET or GET operation.\r\n         *\t\tGET: \r\n         *\t\t- found: a flag indicating if the key was found or not.\r\n         *\t\t- value: the property value.\r\n         *\t\tSET:\r\n         *\t\t- items: a list of key value pairs of the properties being set.\r\n         *\t\t\t\teach contains:\r\n         *\t\t\t\t\t- found: a flag indicating if the key was found or not.\r\n         *\t\t\t\t\t- key: the property key.\r\n         *\t\t\t\t\t- value: the property value.\r\n         */\r\n        function update(instance, obj, callback, key, value){\r\n            var result = {op:undefined, items: [] };\r\n            if(typeof value === 'undefined' && typeof key === 'string') {\r\n                //get\r\n                result.op = 'get';\r\n                if(obj.hasOwnProperty(key)){\r\n                    result.found = true;\r\n                    result.value = obj[key];\r\n                }else{\r\n                    result.found = false;\r\n                    result.value = undefined;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                var old;\r\n                //set\r\n                result.op = 'set';\r\n                if(typeof key === 'object'){\r\n                    //set multiple\r\n                    var args = key;\r\n                    for (var prop in args) {\r\n                        if (obj.hasOwnProperty(prop)) {\r\n                            if(obj[prop] !== args[prop]){\r\n                                old = obj[prop];\r\n                                obj[prop] = args[prop];\r\n                                callback.call(instance,prop, old, args[prop]);\r\n                            }\r\n                            result.items.push({ 'key': prop, 'value': args[prop], 'found':true});\r\n                        }else{\r\n                            result.items.push({ 'key': prop, 'value': args[prop], 'found':false});\r\n                        }\r\n                    }\r\n                } else if (typeof key === 'string'){\r\n                    //set single\r\n                    if (obj.hasOwnProperty(key)) {\r\n                        if(obj[key] !== value){\r\n                            old  = obj[key];\r\n                            obj[key] = value;\r\n                            callback.call(instance,key, old, value);\r\n                        }\r\n                        result.items.push({'key': key, 'value': value , 'found':true});\r\n\r\n                    }else{\r\n                        result.items.push({'key': key, 'value': value , 'found':false});\r\n                    }\r\n                } else {\r\n                    //invalid params\r\n                    throw new Error('args must be a string or object');\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n\r\n        /**\r\n         * Triggers a close event.\r\n         *\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function triggerClose(instance) {\r\n            var found;\r\n            triggerCallback(instance, function (button) {\r\n                return found = instance.get('invokeOnCloseOff') !== true && (button.invokeOnClose === true);\r\n            });\r\n            //none of the buttons registered as onclose callback\r\n            //close the dialog\r\n            if (!found && instance.isOpen()) {\r\n                instance.close();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Dialogs commands event handler, attached to the dialog commands element.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function commandsClickHandler(event, instance) {\r\n            var target = event.srcElement || event.target;\r\n            switch (target) {\r\n            case instance.elements.commands.pin:\r\n                if (!instance.isPinned()) {\r\n                    pin(instance);\r\n                } else {\r\n                    unpin(instance);\r\n                }\r\n                break;\r\n            case instance.elements.commands.maximize:\r\n                if (!instance.isMaximized()) {\r\n                    maximize(instance);\r\n                } else {\r\n                    restore(instance);\r\n                }\r\n                break;\r\n            case instance.elements.commands.close:\r\n                triggerClose(instance);\r\n                break;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Helper: pins the modeless dialog.\r\n         *\r\n         * @param {Object} instance\tThe dialog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function pin(instance) {\r\n            //pin the dialog\r\n            instance.set('pinned', true);\r\n        }\r\n\r\n        /**\r\n         * Helper: unpins the modeless dialog.\r\n         *\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function unpin(instance) {\r\n            //unpin the dialog \r\n            instance.set('pinned', false);\r\n        }\r\n\r\n\r\n        /**\r\n         * Helper: enlarges the dialog to fill the entire screen.\r\n         *\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function maximize(instance) {\r\n            // allow custom `onmaximize` method\r\n            dispatchEvent('onmaximize', instance);\r\n            //maximize the dialog \r\n            addClass(instance.elements.root, classes.maximized);\r\n            if (instance.isOpen()) {\r\n                ensureNoOverflow();\r\n            }\r\n            // allow custom `onmaximized` method\r\n            dispatchEvent('onmaximized', instance);\r\n        }\r\n\r\n        /**\r\n         * Helper: returns the dialog to its former size.\r\n         *\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function restore(instance) {\r\n            // allow custom `onrestore` method\r\n            dispatchEvent('onrestore', instance);\r\n            //maximize the dialog \r\n            removeClass(instance.elements.root, classes.maximized);\r\n            if (instance.isOpen()) {\r\n                ensureNoOverflow();\r\n            }\r\n            // allow custom `onrestored` method\r\n            dispatchEvent('onrestored', instance);\r\n        }\r\n\r\n        /**\r\n         * Show or hide the maximize box.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updatePinnable(instance) {\r\n            if (instance.get('pinnable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.pinnable);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.pinnable);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Helper: Fixes the absolutly positioned modal div position.\r\n         *\r\n         * @param {Object} instance The dialog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function addAbsPositionFix(instance) {\r\n            var scrollLeft = getScrollLeft();\r\n            instance.elements.modal.style.marginTop = getScrollTop() + 'px';\r\n            instance.elements.modal.style.marginLeft = scrollLeft + 'px';\r\n            instance.elements.modal.style.marginRight = (-scrollLeft) + 'px';\r\n        }\r\n\r\n        /**\r\n         * Helper: Removes the absolutly positioned modal div position fix.\r\n         *\r\n         * @param {Object} instance The dialog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function removeAbsPositionFix(instance) {\r\n            var marginTop = parseInt(instance.elements.modal.style.marginTop, 10);\r\n            var marginLeft = parseInt(instance.elements.modal.style.marginLeft, 10);\r\n            instance.elements.modal.style.marginTop = '';\r\n            instance.elements.modal.style.marginLeft = '';\r\n            instance.elements.modal.style.marginRight = '';\r\n\r\n            if (instance.isOpen()) {\r\n                var top = 0,\r\n                    left = 0\r\n                ;\r\n                if (instance.elements.dialog.style.top !== '') {\r\n                    top = parseInt(instance.elements.dialog.style.top, 10);\r\n                }\r\n                instance.elements.dialog.style.top = (top + (marginTop - getScrollTop())) + 'px';\r\n\r\n                if (instance.elements.dialog.style.left !== '') {\r\n                    left = parseInt(instance.elements.dialog.style.left, 10);\r\n                }\r\n                instance.elements.dialog.style.left = (left + (marginLeft - getScrollLeft())) + 'px';\r\n            }\r\n        }\r\n        /**\r\n         * Helper: Adds/Removes the absolutly positioned modal div position fix based on its pinned setting.\r\n         *\r\n         * @param {Object} instance The dialog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateAbsPositionFix(instance) {\r\n            // if modeless and unpinned add fix\r\n            if (!instance.get('modal') && !instance.get('pinned')) {\r\n                addAbsPositionFix(instance);\r\n            } else {\r\n                removeAbsPositionFix(instance);\r\n            }\r\n        }\r\n        /**\r\n         * Toggles the dialog position lock | modeless only.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to make it modal, false otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updatePinned(instance) {\r\n            if (instance.get('pinned')) {\r\n                removeClass(instance.elements.root, classes.unpinned);\r\n                if (instance.isOpen()) {\r\n                    removeAbsPositionFix(instance);\r\n                }\r\n            } else {\r\n                addClass(instance.elements.root, classes.unpinned);\r\n                if (instance.isOpen() && !instance.isModal()) {\r\n                    addAbsPositionFix(instance);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Show or hide the maximize box.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateMaximizable(instance) {\r\n            if (instance.get('maximizable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.maximizable);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.maximizable);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Show or hide the close box.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateClosable(instance) {\r\n            if (instance.get('closable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.closable);\r\n                bindClosableEvents(instance);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.closable);\r\n                unbindClosableEvents(instance);\r\n            }\r\n        }\r\n\r\n        \r\n        var cancelClick = false,// flag to cancel click event if already handled by end resize event (the mousedown, mousemove, mouseup sequence fires a click event.).\r\n            modalClickHandlerTS=0 // stores last click timestamp to prevent executing the handler twice on double click.\r\n            ;\r\n\r\n        /**\r\n         * Helper: closes the modal dialog when clicking the modal\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function modalClickHandler(event, instance) {\r\n            if(event.timeStamp - modalClickHandlerTS > 200 && (modalClickHandlerTS = event.timeStamp) && !cancelClick){\r\n                var target = event.srcElement || event.target;\r\n                if (instance.get('closableByDimmer') === true && target === instance.elements.modal) {\r\n                    triggerClose(instance);\r\n                }\r\n            }\r\n            cancelClick = false;\r\n        }\r\n\r\n        // stores last call timestamp to prevent triggering the callback twice.\r\n        var callbackTS = 0;\r\n        // flag to cancel keyup event if already handled by click event (pressing Enter on a focusted button).\r\n        var cancelKeyup = false;\r\n        /** \r\n         * Helper: triggers a button callback\r\n         *\r\n         * @param {Object}\t\tThe dilog instance.\r\n         * @param {Function}\tCallback to check which button triggered the event.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function triggerCallback(instance, check) {\r\n            if(Date.now() - callbackTS > 200 && (callbackTS = Date.now())){\r\n                for (var idx = 0; idx < instance.__internal.buttons.length; idx += 1) {\r\n                    var button = instance.__internal.buttons[idx];\r\n                    if (!button.element.disabled && check(button)) {\r\n                        var closeEvent = createCloseEvent(idx, button);\r\n                        if (typeof instance.callback === 'function') {\r\n                            instance.callback.apply(instance, [closeEvent]);\r\n                        }\r\n                        //close the dialog only if not canceled.\r\n                        if (closeEvent.cancel === false) {\r\n                            instance.close();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Clicks event handler, attached to the dialog footer.\r\n         *\r\n         * @param {Event}\t\tDOM event object.\r\n         * @param {Object}\t\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function buttonsClickHandler(event, instance) {\r\n            var target = event.srcElement || event.target;\r\n            triggerCallback(instance, function (button) {\r\n                // if this button caused the click, cancel keyup event\r\n                return button.element === target && (cancelKeyup = true);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Keyup event handler, attached to the document.body\r\n         *\r\n         * @param {Event}\t\tDOM event object.\r\n         * @param {Object}\t\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function keyupHandler(event) {\r\n            //hitting enter while button has focus will trigger keyup too.\r\n            //ignore if handled by clickHandler\r\n            if (cancelKeyup) {\r\n                cancelKeyup = false;\r\n                return;\r\n            }\r\n            var instance = openDialogs[openDialogs.length - 1];\r\n            var keyCode = event.keyCode;\r\n            if (instance.__internal.buttons.length === 0 && keyCode === keys.ESC && instance.get('closable') === true) {\r\n                triggerClose(instance);\r\n                return false;\r\n            }else if (usedKeys.indexOf(keyCode) > -1) {\r\n                triggerCallback(instance, function (button) {\r\n                    return button.key === keyCode;\r\n                });\r\n                return false;\r\n            }\r\n        }\r\n        /**\r\n        * Keydown event handler, attached to the document.body\r\n        *\r\n        * @param {Event}\t\tDOM event object.\r\n        * @param {Object}\t\tThe dilog instance.\r\n        * \r\n        * @return {undefined}\r\n        */\r\n        function keydownHandler(event) {\r\n            var instance = openDialogs[openDialogs.length - 1];\r\n            var keyCode = event.keyCode;\r\n            if (keyCode === keys.LEFT || keyCode === keys.RIGHT) {\r\n                var buttons = instance.__internal.buttons;\r\n                for (var x = 0; x < buttons.length; x += 1) {\r\n                    if (document.activeElement === buttons[x].element) {\r\n                        switch (keyCode) {\r\n                        case keys.LEFT:\r\n                            buttons[(x || buttons.length) - 1].element.focus();\r\n                            return;\r\n                        case keys.RIGHT:\r\n                            buttons[(x + 1) % buttons.length].element.focus();\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n            }else if (keyCode < keys.F12 + 1 && keyCode > keys.F1 - 1 && usedKeys.indexOf(keyCode) > -1) {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                triggerCallback(instance, function (button) {\r\n                    return button.key === keyCode;\r\n                });\r\n                return false;\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Sets focus to proper dialog element\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Node} [resetTarget=undefined] DOM element to reset focus to.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function setFocus(instance, resetTarget) {\r\n            // reset target has already been determined.\r\n            if (resetTarget) {\r\n                resetTarget.focus();\r\n            } else {\r\n                // current instance focus settings\r\n                var focus = instance.__internal.focus;\r\n                // the focus element.\r\n                var element = focus.element;\r\n\r\n                switch (typeof focus.element) {\r\n                // a number means a button index\r\n                case 'number':\r\n                    if (instance.__internal.buttons.length > focus.element) {\r\n                        //in basic view, skip focusing the buttons.\r\n                        if (instance.get('basic') === true) {\r\n                            element = instance.elements.reset[0];\r\n                        } else {\r\n                            element = instance.__internal.buttons[focus.element].element;\r\n                        }\r\n                    }\r\n                    break;\r\n                // a string means querySelector to select from dialog body contents.\r\n                case 'string':\r\n                    element = instance.elements.body.querySelector(focus.element);\r\n                    break;\r\n                // a function should return the focus element.\r\n                case 'function':\r\n                    element = focus.element.call(instance);\r\n                    break;\r\n                }\r\n\r\n                // if no focus element, default to first reset element.\r\n                if (instance.get('defaultFocusOff') === true || ((typeof element === 'undefined' || element === null) && instance.__internal.buttons.length === 0)) {\r\n                    element = instance.elements.reset[0];\r\n                }\r\n                // focus\r\n                if (element && element.focus) {\r\n                    element.focus();\r\n                    // if selectable\r\n                    if (focus.select && element.select) {\r\n                        element.select();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Focus event handler, attached to document.body and dialogs own reset links.\r\n         * handles the focus for modal dialogs only.\r\n         *\r\n         * @param {Event} event DOM focus event object.\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function onReset(event, instance) {\r\n\r\n            // should work on last modal if triggered from document.body \r\n            if (!instance) {\r\n                for (var x = openDialogs.length - 1; x > -1; x -= 1) {\r\n                    if (openDialogs[x].isModal()) {\r\n                        instance = openDialogs[x];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(instance) {\r\n                // if modal\r\n                if (instance.isModal()) {\r\n                    // determine reset target to enable forward/backward tab cycle.\r\n                    var firstReset = instance.elements.reset[0],\r\n                        lastReset = instance.elements.reset[1],\r\n                        lastFocusedElement = event.relatedTarget,\r\n                        within = instance.elements.root.contains(lastFocusedElement),\r\n                        target = event.srcElement || event.target,\r\n                        resetTarget;\r\n\r\n                    //if the previous focused element element was outside the modal do nthing\r\n                    if(  /*first show */\r\n                        (target === firstReset && !within) ||\r\n                         /*focus cycle */\r\n                        (target === lastReset && lastFocusedElement === firstReset)){\r\n                        return;\r\n                    }else if(target === lastReset || target === document.body){\r\n                        resetTarget = firstReset;\r\n                    }else if(target === firstReset && lastFocusedElement === lastReset){\r\n                        resetTarget = findTabbable(instance);\r\n                    }else if(target === firstReset && within){\r\n                        resetTarget = findTabbable(instance, true);\r\n                    }\r\n                    // focus\r\n                    setFocus(instance, resetTarget);\r\n                }\r\n            }\r\n        }\r\n        function findTabbable(instance, last){\r\n            var tabbables = [].slice.call(instance.elements.dialog.querySelectorAll(defaults.tabbable));\r\n            if(last){\r\n                tabbables.reverse();\r\n            }\r\n            for(var x=0;x<tabbables.length;x+=1){\r\n                var tabbable = tabbables[x];\r\n                //check if visible\r\n                if(!!(tabbable.offsetParent || tabbable.offsetWidth || tabbable.offsetHeight || tabbable.getClientRects().length)){\r\n                    return tabbable;\r\n                }\r\n            }\r\n        }\r\n        function recycleTab(event) {\r\n            var instance = openDialogs[openDialogs.length - 1];\r\n            if (instance && event.shiftKey && event.keyCode === keys.TAB) {\r\n                instance.elements.reset[1].focus();\r\n            }\r\n        }\r\n        /**\r\n         * Transition in transitionend event handler. \r\n         *\r\n         * @param {Event}\t\tTransitionEnd event object.\r\n         * @param {Object}\t\tThe dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function handleTransitionInEvent(event, instance) {\r\n            // clear the timer\r\n            clearTimeout(instance.__internal.timerIn);\r\n\r\n            // once transition is complete, set focus\r\n            setFocus(instance);\r\n\r\n            // allow handling key up after transition ended.\r\n            cancelKeyup = false;\r\n\r\n            // allow custom `onfocus` method\r\n            dispatchEvent('onfocus', instance);\r\n\r\n            // unbind the event\r\n            off(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler);\r\n\r\n            removeClass(instance.elements.root, classes.animationIn);\r\n        }\r\n\r\n        /**\r\n         * Transition out transitionend event handler. \r\n         *\r\n         * @param {Event}\t\tTransitionEnd event object.\r\n         * @param {Object}\t\tThe dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function handleTransitionOutEvent(event, instance) {\r\n            // clear the timer\r\n            clearTimeout(instance.__internal.timerOut);\r\n            // unbind the event\r\n            off(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler);\r\n\r\n            // reset move updates\r\n            resetMove(instance);\r\n            // reset resize updates\r\n            resetResize(instance);\r\n\r\n            // restore if maximized\r\n            if (instance.isMaximized() && !instance.get('startMaximized')) {\r\n                restore(instance);\r\n            }\r\n\r\n            //destory the instance\r\n            if (typeof instance.__internal.destroy === 'function') {\r\n                instance.__internal.destroy.apply(instance);\r\n            }\r\n        }\r\n        /* Controls moving a dialog around */\r\n        //holde the current moving instance\r\n        var movable = null,\r\n            //holds the current X offset when move starts\r\n            offsetX = 0,\r\n            //holds the current Y offset when move starts\r\n            offsetY = 0,\r\n            xProp = 'pageX',\r\n            yProp = 'pageY',\r\n            bounds = null,\r\n            refreshTop = false,\r\n            moveDelegate = null\r\n        ;\r\n\r\n        /**\r\n         * Helper: sets the element top/left coordinates\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Node} element The element being moved.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function moveElement(event, element) {\r\n            var left = (event[xProp] - offsetX),\r\n                top  = (event[yProp] - offsetY);\r\n\r\n            if(refreshTop){\r\n                top -= document.body.scrollTop;\r\n            }\r\n           \r\n            element.style.left = left + 'px';\r\n            element.style.top = top + 'px';\r\n           \r\n        }\r\n        /**\r\n         * Helper: sets the element top/left coordinates within screen bounds\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Node} element The element being moved.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function moveElementBounded(event, element) {\r\n            var left = (event[xProp] - offsetX),\r\n                top  = (event[yProp] - offsetY);\r\n\r\n            if(refreshTop){\r\n                top -= document.body.scrollTop;\r\n            }\r\n            \r\n            element.style.left = Math.min(bounds.maxLeft, Math.max(bounds.minLeft, left)) + 'px';\r\n            if(refreshTop){\r\n                element.style.top = Math.min(bounds.maxTop, Math.max(bounds.minTop, top)) + 'px';\r\n            }else{\r\n                element.style.top = Math.max(bounds.minTop, top) + 'px';\r\n            }\r\n        }\r\n            \r\n\r\n        /**\r\n         * Triggers the start of a move event, attached to the header element mouse down event.\r\n         * Adds no-selection class to the body, disabling selection while moving.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Object} instance The dilog instance.\r\n         * \r\n         * @return {Boolean} false\r\n         */\r\n        function beginMove(event, instance) {\r\n            if (resizable === null && !instance.isMaximized() && instance.get('movable')) {\r\n                var eventSrc, left=0, top=0;\r\n                if (event.type === 'touchstart') {\r\n                    event.preventDefault();\r\n                    eventSrc = event.targetTouches[0];\r\n                    xProp = 'clientX';\r\n                    yProp = 'clientY';\r\n                } else if (event.button === 0) {\r\n                    eventSrc = event;\r\n                }\r\n\r\n                if (eventSrc) {\r\n\r\n                    var element = instance.elements.dialog;\r\n                    addClass(element, classes.capture);\r\n\r\n                    if (element.style.left) {\r\n                        left = parseInt(element.style.left, 10);\r\n                    }\r\n\r\n                    if (element.style.top) {\r\n                        top = parseInt(element.style.top, 10);\r\n                    }\r\n                    \r\n                    offsetX = eventSrc[xProp] - left;\r\n                    offsetY = eventSrc[yProp] - top;\r\n\r\n                    if(instance.isModal()){\r\n                        offsetY += instance.elements.modal.scrollTop;\r\n                    }else if(instance.isPinned()){\r\n                        offsetY -= document.body.scrollTop;\r\n                    }\r\n                    \r\n                    if(instance.get('moveBounded')){\r\n                        var current = element,\r\n                            offsetLeft = -left,\r\n                            offsetTop = -top;\r\n                        \r\n                        //calc offset\r\n                        do {\r\n                            offsetLeft += current.offsetLeft;\r\n                            offsetTop += current.offsetTop;\r\n                        } while (current = current.offsetParent);\r\n                        \r\n                        bounds = {\r\n                            maxLeft : offsetLeft,\r\n                            minLeft : -offsetLeft,\r\n                            maxTop  : document.documentElement.clientHeight - element.clientHeight - offsetTop,\r\n                            minTop  : -offsetTop\r\n                        };\r\n                        moveDelegate = moveElementBounded;\r\n                    }else{\r\n                        bounds = null;\r\n                        moveDelegate = moveElement;\r\n                    }\r\n                    \r\n                    // allow custom `onmove` method\r\n                    dispatchEvent('onmove', instance);\r\n\r\n                    refreshTop = !instance.isModal() && instance.isPinned();\r\n                    movable = instance;\r\n                    moveDelegate(eventSrc, element);\r\n                    addClass(document.body, classes.noSelection);\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * The actual move handler,  attached to document.body mousemove event.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function move(event) {\r\n            if (movable) {\r\n                var eventSrc;\r\n                if (event.type === 'touchmove') {\r\n                    event.preventDefault();\r\n                    eventSrc = event.targetTouches[0];\r\n                } else if (event.button === 0) {\r\n                    eventSrc = event;\r\n                }\r\n                if (eventSrc) {\r\n                    moveDelegate(eventSrc, movable.elements.dialog);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Triggers the end of a move event,  attached to document.body mouseup event.\r\n         * Removes no-selection class from document.body, allowing selection.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function endMove() {\r\n            if (movable) {\r\n                var instance = movable;\r\n                movable = bounds = null;\r\n                removeClass(document.body, classes.noSelection);\r\n                removeClass(instance.elements.dialog, classes.capture);\r\n                // allow custom `onmoved` method\r\n                dispatchEvent('onmoved', instance);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Resets any changes made by moving the element to its original state,\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function resetMove(instance) {\r\n            movable = null;\r\n            var element = instance.elements.dialog;\r\n            element.style.left = element.style.top = '';\r\n        }\r\n\r\n        /**\r\n         * Updates the dialog move behavior.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateMovable(instance) {\r\n            if (instance.get('movable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.movable);\r\n                if (instance.isOpen()) {\r\n                    bindMovableEvents(instance);\r\n                }\r\n            } else {\r\n\r\n                //reset\r\n                resetMove(instance);\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.movable);\r\n                if (instance.isOpen()) {\r\n                    unbindMovableEvents(instance);\r\n                }\r\n            }\r\n        }\r\n\r\n        /* Controls moving a dialog around */\r\n        //holde the current instance being resized\t\t\r\n        var resizable = null,\r\n            //holds the staring left offset when resize starts.\r\n            startingLeft = Number.Nan,\r\n            //holds the staring width when resize starts.\r\n            startingWidth = 0,\r\n            //holds the initial width when resized for the first time.\r\n            minWidth = 0,\r\n            //holds the offset of the resize handle.\r\n            handleOffset = 0\r\n        ;\r\n\r\n        /**\r\n         * Helper: sets the element width/height and updates left coordinate if neccessary.\r\n         *\r\n         * @param {Event} event\tDOM mousemove event object.\r\n         * @param {Node} element The element being moved.\r\n         * @param {Boolean} pinned A flag indicating if the element being resized is pinned to the screen.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function resizeElement(event, element, pageRelative) {\r\n\r\n            //calculate offsets from 0,0\r\n            var current = element;\r\n            var offsetLeft = 0;\r\n            var offsetTop = 0;\r\n            do {\r\n                offsetLeft += current.offsetLeft;\r\n                offsetTop += current.offsetTop;\r\n            } while (current = current.offsetParent);\r\n\r\n            // determine X,Y coordinates.\r\n            var X, Y;\r\n            if (pageRelative === true) {\r\n                X = event.pageX;\r\n                Y = event.pageY;\r\n            } else {\r\n                X = event.clientX;\r\n                Y = event.clientY;\r\n            }\r\n            // rtl handling\r\n            var isRTL = isRightToLeft();\r\n            if (isRTL) {\r\n                // reverse X \r\n                X = document.body.offsetWidth - X;\r\n                // if has a starting left, calculate offsetRight\r\n                if (!isNaN(startingLeft)) {\r\n                    offsetLeft = document.body.offsetWidth - offsetLeft - element.offsetWidth;\r\n                }\r\n            }\r\n\r\n            // set width/height\r\n            element.style.height = (Y - offsetTop + handleOffset) + 'px';\r\n            element.style.width = (X - offsetLeft + handleOffset) + 'px';\r\n\r\n            // if the element being resized has a starting left, maintain it.\r\n            // the dialog is centered, divide by half the offset to maintain the margins.\r\n            if (!isNaN(startingLeft)) {\r\n                var diff = Math.abs(element.offsetWidth - startingWidth) * 0.5;\r\n                if (isRTL) {\r\n                    //negate the diff, why?\r\n                    //when growing it should decrease left\r\n                    //when shrinking it should increase left\r\n                    diff *= -1;\r\n                }\r\n                if (element.offsetWidth > startingWidth) {\r\n                    //growing\r\n                    element.style.left = (startingLeft + diff) + 'px';\r\n                } else if (element.offsetWidth >= minWidth) {\r\n                    //shrinking\r\n                    element.style.left = (startingLeft - diff) + 'px';\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Triggers the start of a resize event, attached to the resize handle element mouse down event.\r\n         * Adds no-selection class to the body, disabling selection while moving.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Object} instance The dilog instance.\r\n         * \r\n         * @return {Boolean} false\r\n         */\r\n        function beginResize(event, instance) {\r\n            if (!instance.isMaximized()) {\r\n                var eventSrc;\r\n                if (event.type === 'touchstart') {\r\n                    event.preventDefault();\r\n                    eventSrc = event.targetTouches[0];\r\n                } else if (event.button === 0) {\r\n                    eventSrc = event;\r\n                }\r\n                if (eventSrc) {\r\n                    // allow custom `onresize` method\r\n                    dispatchEvent('onresize', instance);\r\n                    \r\n                    resizable = instance;\r\n                    handleOffset = instance.elements.resizeHandle.offsetHeight / 2;\r\n                    var element = instance.elements.dialog;\r\n                    addClass(element, classes.capture);\r\n                    startingLeft = parseInt(element.style.left, 10);\r\n                    element.style.height = element.offsetHeight + 'px';\r\n                    element.style.minHeight = instance.elements.header.offsetHeight + instance.elements.footer.offsetHeight + 'px';\r\n                    element.style.width = (startingWidth = element.offsetWidth) + 'px';\r\n\r\n                    if (element.style.maxWidth !== 'none') {\r\n                        element.style.minWidth = (minWidth = element.offsetWidth) + 'px';\r\n                    }\r\n                    element.style.maxWidth = 'none';\r\n                    addClass(document.body, classes.noSelection);\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * The actual resize handler,  attached to document.body mousemove event.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function resize(event) {\r\n            if (resizable) {\r\n                var eventSrc;\r\n                if (event.type === 'touchmove') {\r\n                    event.preventDefault();\r\n                    eventSrc = event.targetTouches[0];\r\n                } else if (event.button === 0) {\r\n                    eventSrc = event;\r\n                }\r\n                if (eventSrc) {\r\n                    resizeElement(eventSrc, resizable.elements.dialog, !resizable.get('modal') && !resizable.get('pinned'));\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Triggers the end of a resize event,  attached to document.body mouseup event.\r\n         * Removes no-selection class from document.body, allowing selection.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function endResize() {\r\n            if (resizable) {\r\n                var instance = resizable;\r\n                resizable = null;\r\n                removeClass(document.body, classes.noSelection);\r\n                removeClass(instance.elements.dialog, classes.capture);\r\n                cancelClick = true;\r\n                // allow custom `onresized` method\r\n                dispatchEvent('onresized', instance);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Resets any changes made by resizing the element to its original state.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function resetResize(instance) {\r\n            resizable = null;\r\n            var element = instance.elements.dialog;\r\n            if (element.style.maxWidth === 'none') {\r\n                //clear inline styles.\r\n                element.style.maxWidth = element.style.minWidth = element.style.width = element.style.height = element.style.minHeight = element.style.left = '';\r\n                //reset variables.\r\n                startingLeft = Number.Nan;\r\n                startingWidth = minWidth = handleOffset = 0;\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Updates the dialog move behavior.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateResizable(instance) {\r\n            if (instance.get('resizable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.resizable);\r\n                if (instance.isOpen()) {\r\n                    bindResizableEvents(instance);\r\n                }\r\n            } else {\r\n                //reset\r\n                resetResize(instance);\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.resizable);\r\n                if (instance.isOpen()) {\r\n                    unbindResizableEvents(instance);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Reset move/resize on window resize.\r\n         *\r\n         * @param {Event} event\twindow resize event object.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function windowResize(/*event*/) {\r\n            for (var x = 0; x < openDialogs.length; x += 1) {\r\n                var instance = openDialogs[x];\r\n                if (instance.get('autoReset')) {\r\n                    resetMove(instance);\r\n                    resetResize(instance);\r\n                }\r\n            }\r\n        }\r\n        /**\r\n         * Bind dialogs events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindEvents(instance) {\r\n            // if first dialog, hook global handlers\r\n            if (openDialogs.length === 1) {\r\n                //global\r\n                on(window, 'resize', windowResize);\r\n                on(document.body, 'keyup', keyupHandler);\r\n                on(document.body, 'keydown', keydownHandler);\r\n                on(document.body, 'focus', onReset);\r\n\r\n                //move\r\n                on(document.documentElement, 'mousemove', move);\r\n                on(document.documentElement, 'touchmove', move, false, false);\r\n                on(document.documentElement, 'mouseup', endMove);\r\n                on(document.documentElement, 'touchend', endMove);\r\n                //resize\r\n                on(document.documentElement, 'mousemove', resize);\r\n                on(document.documentElement, 'touchmove', resize, false, false);\r\n                on(document.documentElement, 'mouseup', endResize);\r\n                on(document.documentElement, 'touchend', endResize);\r\n            }\r\n\r\n            // common events\r\n            on(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);\r\n            on(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);\r\n            on(instance.elements.reset[0], 'focusin', instance.__internal.resetHandler);\r\n            on(instance.elements.reset[0], 'keydown', recycleTab);\r\n            on(instance.elements.reset[1], 'focusin', instance.__internal.resetHandler);\r\n\r\n            //prevent handling key up when dialog is being opened by a key stroke.\r\n            cancelKeyup = true;\r\n            // hook in transition handler\r\n            on(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler);\r\n\r\n            // modelss only events\r\n            if (!instance.get('modal')) {\r\n                bindModelessEvents(instance);\r\n            }\r\n\r\n            // resizable\r\n            if (instance.get('resizable')) {\r\n                bindResizableEvents(instance);\r\n            }\r\n\r\n            // movable\r\n            if (instance.get('movable')) {\r\n                bindMovableEvents(instance);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Unbind dialogs events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindEvents(instance) {\r\n            // if last dialog, remove global handlers\r\n            if (openDialogs.length === 1) {\r\n                //global\r\n                off(window, 'resize', windowResize);\r\n                off(document.body, 'keyup', keyupHandler);\r\n                off(document.body, 'keydown', keydownHandler);\r\n                off(document.body, 'focus', onReset);\r\n                //move\r\n                off(document.documentElement, 'mousemove', move);\r\n                off(document.documentElement, 'mouseup', endMove);\r\n                //resize\r\n                off(document.documentElement, 'mousemove', resize);\r\n                off(document.documentElement, 'mouseup', endResize);\r\n            }\r\n\r\n            // common events\r\n            off(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);\r\n            off(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);\r\n            off(instance.elements.reset[0], 'focusin', instance.__internal.resetHandler);\r\n            off(instance.elements.reset[0], 'keydown', recycleTab);\r\n            off(instance.elements.reset[1], 'focusin', instance.__internal.resetHandler);\r\n\r\n            // hook out transition handler\r\n            on(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler);\r\n\r\n            // modelss only events\r\n            if (!instance.get('modal')) {\r\n                unbindModelessEvents(instance);\r\n            }\r\n\r\n            // movable\r\n            if (instance.get('movable')) {\r\n                unbindMovableEvents(instance);\r\n            }\r\n\r\n            // resizable\r\n            if (instance.get('resizable')) {\r\n                unbindResizableEvents(instance);\r\n            }\r\n\r\n        }\r\n\r\n        /**\r\n         * Bind modeless specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindModelessEvents(instance) {\r\n            on(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);\r\n        }\r\n\r\n        /**\r\n         * Unbind modeless specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindModelessEvents(instance) {\r\n            off(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Bind movable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindMovableEvents(instance) {\r\n            on(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);\r\n            on(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler, false, false);\r\n        }\r\n\r\n        /**\r\n         * Unbind movable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindMovableEvents(instance) {\r\n            off(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);\r\n            off(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler, false, false);\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Bind resizable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindResizableEvents(instance) {\r\n            on(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);\r\n            on(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler, false, false);\r\n        }\r\n\r\n        /**\r\n         * Unbind resizable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindResizableEvents(instance) {\r\n            off(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);\r\n            off(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler, false, false);\r\n        }\r\n\r\n        /**\r\n         * Bind closable events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindClosableEvents(instance) {\r\n            on(instance.elements.modal, 'click', instance.__internal.modalClickHandler);\r\n        }\r\n\r\n        /**\r\n         * Unbind closable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindClosableEvents(instance) {\r\n            off(instance.elements.modal, 'click', instance.__internal.modalClickHandler);\r\n        }\r\n        // dialog API\r\n        return {\r\n            __init:initialize,\r\n            /**\r\n             * Check if dialog is currently open\r\n             *\r\n             * @return {Boolean}\r\n             */\r\n            isOpen: function () {\r\n                return this.__internal.isOpen;\r\n            },\r\n            isModal: function (){\r\n                return this.elements.root.className.indexOf(classes.modeless) < 0;\r\n            },\r\n            isMaximized:function(){\r\n                return this.elements.root.className.indexOf(classes.maximized) > -1;\r\n            },\r\n            isPinned:function(){\r\n                return this.elements.root.className.indexOf(classes.unpinned) < 0;\r\n            },\r\n            maximize:function(){\r\n                if(!this.isMaximized()){\r\n                    maximize(this);\r\n                }\r\n                return this;\r\n            },\r\n            restore:function(){\r\n                if(this.isMaximized()){\r\n                    restore(this);\r\n                }\r\n                return this;\r\n            },\r\n            pin:function(){\r\n                if(!this.isPinned()){\r\n                    pin(this);\r\n                }\r\n                return this;\r\n            },\r\n            unpin:function(){\r\n                if(this.isPinned()){\r\n                    unpin(this);\r\n                }\r\n                return this;\r\n            },\r\n            bringToFront:function(){\r\n                bringToFront(null, this);\r\n                return this;\r\n            },\r\n            /**\r\n             * Move the dialog to a specific x/y coordinates\r\n             *\r\n             * @param {Number} x    The new dialog x coordinate in pixels.\r\n             * @param {Number} y    The new dialog y coordinate in pixels.\r\n             *\r\n             * @return {Object} The dialog instance.\r\n             */\r\n            moveTo:function(x,y){\r\n                if(!isNaN(x) && !isNaN(y)){\r\n                    // allow custom `onmove` method\r\n                    dispatchEvent('onmove', this);\r\n                    \r\n                    var element = this.elements.dialog,\r\n                        current = element,\r\n                        offsetLeft = 0,\r\n                        offsetTop = 0;\r\n                    \r\n                    //subtract existing left,top\r\n                    if (element.style.left) {\r\n                        offsetLeft -= parseInt(element.style.left, 10);\r\n                    }\r\n                    if (element.style.top) {\r\n                        offsetTop -= parseInt(element.style.top, 10);\r\n                    }\r\n                    //calc offset\r\n                    do {\r\n                        offsetLeft += current.offsetLeft;\r\n                        offsetTop += current.offsetTop;\r\n                    } while (current = current.offsetParent);\r\n\r\n                    //calc left, top\r\n                    var left = (x - offsetLeft);\r\n                    var top  = (y - offsetTop);\r\n\r\n                    //// rtl handling\r\n                    if (isRightToLeft()) {\r\n                        left *= -1;\r\n                    }\r\n\r\n                    element.style.left = left + 'px';\r\n                    element.style.top = top + 'px';\r\n                    \r\n                    // allow custom `onmoved` method\r\n                    dispatchEvent('onmoved', this);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Resize the dialog to a specific width/height (the dialog must be 'resizable').\r\n             * The dialog can be resized to:\r\n             *  A minimum width equal to the initial display width\r\n             *  A minimum height equal to the sum of header/footer heights.\r\n             *\r\n             *\r\n             * @param {Number or String} width    The new dialog width in pixels or in percent.\r\n             * @param {Number or String} height   The new dialog height in pixels or in percent.\r\n             *\r\n             * @return {Object} The dialog instance.\r\n             */\r\n            resizeTo:function(width,height){\r\n                var w = parseFloat(width),\r\n                    h = parseFloat(height),\r\n                    regex = /(\\d*\\.\\d+|\\d+)%/\r\n                ;\r\n\r\n                if(!isNaN(w) && !isNaN(h) && this.get('resizable') === true){\r\n                    \r\n                    // allow custom `onresize` method\r\n                    dispatchEvent('onresize', this);\r\n                    \r\n                    if(('' + width).match(regex)){\r\n                        w = w / 100 * document.documentElement.clientWidth ;\r\n                    }\r\n\r\n                    if(('' + height).match(regex)){\r\n                        h = h / 100 * document.documentElement.clientHeight;\r\n                    }\r\n\r\n                    var element = this.elements.dialog;\r\n                    if (element.style.maxWidth !== 'none') {\r\n                        element.style.minWidth = (minWidth = element.offsetWidth) + 'px';\r\n                    }\r\n                    element.style.maxWidth = 'none';\r\n                    element.style.minHeight = this.elements.header.offsetHeight + this.elements.footer.offsetHeight + 'px';\r\n                    element.style.width = w + 'px';\r\n                    element.style.height = h + 'px';\r\n                    \r\n                    // allow custom `onresized` method\r\n                    dispatchEvent('onresized', this);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Gets or Sets dialog settings/options \r\n             *\r\n             * @param {String|Object} key A string specifying a propery name or a collection of key/value pairs.\r\n             * @param {Object} value Optional, the value associated with the key (in case it was a string).\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            setting : function (key, value) {\r\n                var self = this;\r\n                var result = update(this, this.__internal.options, function(k,o,n){ optionUpdated(self,k,o,n); }, key, value);\r\n                if(result.op === 'get'){\r\n                    if(result.found){\r\n                        return result.value;\r\n                    }else if(typeof this.settings !== 'undefined'){\r\n                        return update(this, this.settings, this.settingUpdated || function(){}, key, value).value;\r\n                    }else{\r\n                        return undefined;\r\n                    }\r\n                }else if(result.op === 'set'){\r\n                    if(result.items.length > 0){\r\n                        var callback = this.settingUpdated || function(){};\r\n                        for(var x=0;x<result.items.length;x+=1){\r\n                            var item = result.items[x];\r\n                            if(!item.found && typeof this.settings !== 'undefined'){\r\n                                update(this, this.settings, callback, item.key, item.value);\r\n                            }\r\n                        }\r\n                    }\r\n                    return this;\r\n                }\r\n            },\r\n            /**\r\n             * [Alias] Sets dialog settings/options \r\n             */\r\n            set:function(key, value){\r\n                this.setting(key,value);\r\n                return this;\r\n            },\r\n            /**\r\n             * [Alias] Gets dialog settings/options \r\n             */\r\n            get:function(key){\r\n                return this.setting(key);\r\n            },\r\n            /**\r\n            * Sets dialog header\r\n            * @content {string or element}\r\n            *\r\n            * @return {undefined}\r\n            */\r\n            setHeader:function(content){\r\n                if(typeof content === 'string'){\r\n                    clearContents(this.elements.header);\r\n                    this.elements.header.innerHTML = content;\r\n                }else if (content instanceof window.HTMLElement && this.elements.header.firstChild !== content){\r\n                    clearContents(this.elements.header);\r\n                    this.elements.header.appendChild(content);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n            * Sets dialog contents\r\n            * @content {string or element}\r\n            *\r\n            * @return {undefined}\r\n            */\r\n            setContent:function(content){\r\n                if(typeof content === 'string'){\r\n                    clearContents(this.elements.content);\r\n                    this.elements.content.innerHTML = content;\r\n                }else if (content instanceof window.HTMLElement && this.elements.content.firstChild !== content){\r\n                    clearContents(this.elements.content);\r\n                    this.elements.content.appendChild(content);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Show the dialog as modal\r\n             *\r\n             * @return {Object} the dialog instance.\r\n             */\r\n            showModal: function(className){\r\n                return this.show(true, className);\r\n            },\r\n            /**\r\n             * Show the dialog\r\n             *\r\n             * @return {Object} the dialog instance.\r\n             */\r\n            show: function (modal, className) {\r\n                \r\n                // ensure initialization\r\n                initialize(this);\r\n\r\n                if ( !this.__internal.isOpen ) {\r\n\r\n                    // add to open dialogs\r\n                    this.__internal.isOpen = true;\r\n                    openDialogs.push(this);\r\n\r\n                    // save last focused element\r\n                    if(alertify.defaults.maintainFocus){\r\n                        this.__internal.activeElement = document.activeElement;\r\n                    }\r\n\r\n                    // set tabindex attribute on body element this allows script to give it focusable\r\n                    if(!document.body.hasAttribute('tabindex')) {\r\n                        document.body.setAttribute( 'tabindex', tabindex = '0');\r\n                    }\r\n\r\n                    //allow custom dom manipulation updates before showing the dialog.\r\n                    if(typeof this.prepare === 'function'){\r\n                        this.prepare();\r\n                    }\r\n\r\n                    bindEvents(this);\r\n\r\n                    if(modal !== undefined){\r\n                        this.set('modal', modal);\r\n                    }\r\n\r\n                    //save scroll to prevent document jump\r\n                    saveScrollPosition();\r\n\r\n                    ensureNoOverflow();\r\n\r\n                    // allow custom dialog class on show\r\n                    if(typeof className === 'string' && className !== ''){\r\n                        this.__internal.className = className;\r\n                        addClass(this.elements.root, className);\r\n                    }\r\n\r\n                    // maximize if start maximized\r\n                    if ( this.get('startMaximized')) {\r\n                        this.maximize();\r\n                    }else if(this.isMaximized()){\r\n                        restore(this);\r\n                    }\r\n\r\n                    updateAbsPositionFix(this);\r\n                    this.elements.root.removeAttribute('style');\r\n                    removeClass(this.elements.root, classes.animationOut);\r\n                    addClass(this.elements.root, classes.animationIn);\r\n\r\n                    // set 1s fallback in case transition event doesn't fire\r\n                    clearTimeout( this.__internal.timerIn);\r\n                    this.__internal.timerIn = setTimeout( this.__internal.transitionInHandler, transition.supported ? 1000 : 100 );\r\n\r\n                    if(isSafari){\r\n                        // force desktop safari reflow\r\n                        var root = this.elements.root;\r\n                        root.style.display  = 'none';\r\n                        setTimeout(function(){root.style.display  = 'block';}, 0);\r\n                    }\r\n\r\n                    //reflow\r\n                    reflow = this.elements.root.offsetWidth;\r\n                  \r\n                    // show dialog\r\n                    removeClass(this.elements.root, classes.hidden);\r\n\r\n                    //restore scroll to prevent document jump\r\n                    restoreScrollPosition();\r\n\r\n                    // internal on show event\r\n                    if(typeof this.hooks.onshow === 'function'){\r\n                        this.hooks.onshow.call(this);\r\n                    }\r\n\r\n                    // allow custom `onshow` method\r\n                    dispatchEvent('onshow', this);\r\n\r\n                }else{\r\n                    // reset move updates\r\n                    resetMove(this);\r\n                    // reset resize updates\r\n                    resetResize(this);\r\n                    // shake the dialog to indicate its already open\r\n                    addClass(this.elements.dialog, classes.shake);\r\n                    var self = this;\r\n                    setTimeout(function(){\r\n                        removeClass(self.elements.dialog, classes.shake);\r\n                    },200);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Close the dialog\r\n             *\r\n             * @return {Object} The dialog instance\r\n             */\r\n            close: function () {\r\n                if (this.__internal.isOpen ) {\r\n                    // custom `onclosing` event\r\n                    if(dispatchEvent('onclosing', this) !== false){\r\n\r\n                        unbindEvents(this);\r\n\r\n                        removeClass(this.elements.root, classes.animationIn);\r\n                        addClass(this.elements.root, classes.animationOut);\r\n\r\n                        // set 1s fallback in case transition event doesn't fire\r\n                        clearTimeout( this.__internal.timerOut );\r\n                        this.__internal.timerOut = setTimeout( this.__internal.transitionOutHandler, transition.supported ? 1000 : 100 );\r\n                        // hide dialog\r\n                        addClass(this.elements.root, classes.hidden);\r\n                        //reflow\r\n                        reflow = this.elements.modal.offsetWidth;\r\n\r\n                        // return focus to the last active element\r\n                        if (alertify.defaults.maintainFocus && this.__internal.activeElement) {\r\n                            this.__internal.activeElement.focus();\r\n                            this.__internal.activeElement = null;\r\n                        }\r\n\r\n                        // remove custom dialog class on hide\r\n                        if (typeof this.__internal.className !== 'undefined' && this.__internal.className !== '') {\r\n                            removeClass(this.elements.root, this.__internal.className);\r\n                        }\r\n\r\n                        // internal on close event\r\n                        if(typeof this.hooks.onclose === 'function'){\r\n                            this.hooks.onclose.call(this);\r\n                        }\r\n\r\n                        // allow custom `onclose` method\r\n                        dispatchEvent('onclose', this);\r\n\r\n                        //remove from open dialogs\r\n                        openDialogs.splice(openDialogs.indexOf(this),1);\r\n                        this.__internal.isOpen = false;\r\n\r\n                        ensureNoOverflow();\r\n                    }\r\n\r\n                }\r\n                // last dialog and tab index was set by us, remove it.\r\n                if(!openDialogs.length && tabindex === '0'){\r\n                    document.body.removeAttribute('tabindex');\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Close all open dialogs except this.\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            closeOthers:function(){\r\n                alertify.closeAll(this);\r\n                return this;\r\n            },\r\n            /**\r\n             * Destroys this dialog instance\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            destroy:function(){\r\n                if(this.__internal) {\r\n                    if (this.__internal.isOpen ) {\r\n                        //mark dialog for destruction, this will be called on tranistionOut event.\r\n                        this.__internal.destroy = function(){\r\n                            destruct(this, initialize);\r\n                        };\r\n                        //close the dialog to unbind all events.\r\n                        this.close();\r\n                    }else if(!this.__internal.destroy){\r\n                        destruct(this, initialize);\r\n                    }\r\n                }\r\n                return this;\r\n            },\r\n        };\r\n\t} () );\r\n    var notifier = (function () {\r\n        var reflow,\r\n            element,\r\n            openInstances = [],\r\n            classes = defaults.notifier.classes,\r\n            baseClass = classes.base;\r\n        /**\r\n         * Helper: initializes the notifier instance\r\n         *\r\n         */\r\n        function initialize(instance) {\r\n\r\n            if (!instance.__internal) {\r\n                instance.__internal = {\r\n                    position: alertify.defaults.notifier.position,\r\n                    delay: alertify.defaults.notifier.delay,\r\n                };\r\n\r\n                element = document.createElement('DIV');\r\n                var transitionOff = 'transitionOff' in defaults.notifier ? defaults.notifier.transitionOff : defaults.transitionOff;\r\n                if(transitionOff){\r\n                    baseClass = classes.base + ' ajs-no-transition';\r\n                }\r\n                updatePosition(instance);\r\n            }\r\n\r\n            //add to DOM tree.\r\n            if (element.parentNode !== document.body) {\r\n                document.body.appendChild(element);\r\n            }\r\n        }\r\n\r\n        function pushInstance(instance) {\r\n            instance.__internal.pushed = true;\r\n            openInstances.push(instance);\r\n        }\r\n        function popInstance(instance) {\r\n            openInstances.splice(openInstances.indexOf(instance), 1);\r\n            instance.__internal.pushed = false;\r\n        }\r\n        /**\r\n         * Helper: update the notifier instance position\r\n         *\r\n         */\r\n        function updatePosition(instance) {\r\n            element.className = baseClass;\r\n            switch (instance.__internal.position) {\r\n            case 'top-right':\r\n                addClass(element, classes.top + ' ' + classes.right);\r\n                break;\r\n            case 'top-left':\r\n                addClass(element, classes.top + ' ' + classes.left);\r\n                break;\r\n            case 'top-center':\r\n                addClass(element, classes.top + ' ' + classes.center);\r\n                break;\r\n            case 'bottom-left':\r\n                addClass(element, classes.bottom + ' ' + classes.left);\r\n                break;\r\n            case 'bottom-center':\r\n                addClass(element, classes.bottom + ' ' + classes.center);\r\n                break;\r\n\r\n            default:\r\n            case 'bottom-right':\r\n                addClass(element, classes.bottom + ' ' + classes.right);\r\n                break;\r\n            }\r\n        }\r\n\r\n        /**\r\n        * creates a new notification message\r\n        *\r\n        * @param  {DOMElement} message\tThe notifier message element\r\n        * @param  {Number} wait   Time (in ms) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n        * @param  {Function} callback A callback function to be invoked when the message is dismissed.\r\n        *\r\n        * @return {undefined}\r\n        */\r\n        function create(div, callback) {\r\n\r\n            function clickDelegate(event, instance) {\r\n                if(!instance.__internal.closeButton || event.target.getAttribute('data-close') === 'true'){\r\n                    instance.dismiss(true);\r\n                }\r\n            }\r\n\r\n            function transitionDone(event, instance) {\r\n                // unbind event\r\n                off(instance.element, transition.type, transitionDone);\r\n                // remove the message\r\n                element.removeChild(instance.element);\r\n            }\r\n\r\n            function initialize(instance) {\r\n                if (!instance.__internal) {\r\n                    instance.__internal = {\r\n                        pushed: false,\r\n                        delay : undefined,\r\n                        timer: undefined,\r\n                        clickHandler: undefined,\r\n                        transitionEndHandler: undefined,\r\n                        transitionTimeout: undefined\r\n                    };\r\n                    instance.__internal.clickHandler = delegate(instance, clickDelegate);\r\n                    instance.__internal.transitionEndHandler = delegate(instance, transitionDone);\r\n                }\r\n                return instance;\r\n            }\r\n            function clearTimers(instance) {\r\n                clearTimeout(instance.__internal.timer);\r\n                clearTimeout(instance.__internal.transitionTimeout);\r\n            }\r\n            return initialize({\r\n                /* notification DOM element*/\r\n                element: div,\r\n                /*\r\n                 * Pushes a notification message\r\n                 * @param {string or DOMElement} content The notification message content\r\n                 * @param {Number} wait The time (in seconds) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n                 *\r\n                 */\r\n                push: function (_content, _wait) {\r\n                    if (!this.__internal.pushed) {\r\n\r\n                        pushInstance(this);\r\n                        clearTimers(this);\r\n\r\n                        var content, wait;\r\n                        switch (arguments.length) {\r\n                        case 0:\r\n                            wait = this.__internal.delay;\r\n                            break;\r\n                        case 1:\r\n                            if (typeof (_content) === 'number') {\r\n                                wait = _content;\r\n                            } else {\r\n                                content = _content;\r\n                                wait = this.__internal.delay;\r\n                            }\r\n                            break;\r\n                        case 2:\r\n                            content = _content;\r\n                            wait = _wait;\r\n                            break;\r\n                        }\r\n                        this.__internal.closeButton = alertify.defaults.notifier.closeButton;\r\n                        // set contents\r\n                        if (typeof content !== 'undefined') {\r\n                            this.setContent(content);\r\n                        }\r\n                        // append or insert\r\n                        if (notifier.__internal.position.indexOf('top') < 0) {\r\n                            element.appendChild(this.element);\r\n                        } else {\r\n                            element.insertBefore(this.element, element.firstChild);\r\n                        }\r\n                        reflow = this.element.offsetWidth;\r\n                        addClass(this.element, classes.visible);\r\n                        // attach click event\r\n                        on(this.element, 'click', this.__internal.clickHandler);\r\n                        return this.delay(wait);\r\n                    }\r\n                    return this;\r\n                },\r\n                /*\r\n                 * {Function} callback function to be invoked before dismissing the notification message.\r\n                 * Remarks: A return value === 'false' will cancel the dismissal\r\n                 *\r\n                 */\r\n                ondismiss: function () { },\r\n                /*\r\n                 * {Function} callback function to be invoked when the message is dismissed.\r\n                 *\r\n                 */\r\n                callback: callback,\r\n                /*\r\n                 * Dismisses the notification message\r\n                 * @param {Boolean} clicked A flag indicating if the dismissal was caused by a click.\r\n                 *\r\n                 */\r\n                dismiss: function (clicked) {\r\n                    if (this.__internal.pushed) {\r\n                        clearTimers(this);\r\n                        if (!(typeof this.ondismiss === 'function' && this.ondismiss.call(this) === false)) {\r\n                            //detach click event\r\n                            off(this.element, 'click', this.__internal.clickHandler);\r\n                            // ensure element exists\r\n                            if (typeof this.element !== 'undefined' && this.element.parentNode === element) {\r\n                                //transition end or fallback\r\n                                this.__internal.transitionTimeout = setTimeout(this.__internal.transitionEndHandler, transition.supported ? 1000 : 100);\r\n                                removeClass(this.element, classes.visible);\r\n\r\n                                // custom callback on dismiss\r\n                                if (typeof this.callback === 'function') {\r\n                                    this.callback.call(this, clicked);\r\n                                }\r\n                            }\r\n                            popInstance(this);\r\n                        }\r\n                    }\r\n                    return this;\r\n                },\r\n                /*\r\n                 * Delays the notification message dismissal\r\n                 * @param {Number} wait The time (in seconds) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n                 *\r\n                 */\r\n                delay: function (wait) {\r\n                    clearTimers(this);\r\n                    this.__internal.delay = typeof wait !== 'undefined' && !isNaN(+wait) ? +wait : notifier.__internal.delay;\r\n                    if (this.__internal.delay > 0) {\r\n                        var  self = this;\r\n                        this.__internal.timer = setTimeout(function () { self.dismiss(); }, this.__internal.delay * 1000);\r\n                    }\r\n                    return this;\r\n                },\r\n                /*\r\n                 * Sets the notification message contents\r\n                 * @param {string or DOMElement} content The notification message content\r\n                 *\r\n                 */\r\n                setContent: function (content) {\r\n                    if (typeof content === 'string') {\r\n                        clearContents(this.element);\r\n                        this.element.innerHTML = content;\r\n                    } else if (content instanceof window.HTMLElement && this.element.firstChild !== content) {\r\n                        clearContents(this.element);\r\n                        this.element.appendChild(content);\r\n                    }\r\n                    if(this.__internal.closeButton){\r\n                        var close = document.createElement('span');\r\n                        addClass(close, classes.close);\r\n                        close.setAttribute('data-close', true);\r\n                        this.element.appendChild(close);\r\n                    }\r\n                    return this;\r\n                },\r\n                /*\r\n                 * Dismisses all open notifications except this.\r\n                 *\r\n                 */\r\n                dismissOthers: function () {\r\n                    notifier.dismissAll(this);\r\n                    return this;\r\n                }\r\n            });\r\n        }\r\n\r\n        //notifier api\r\n        return {\r\n            /**\r\n             * Gets or Sets notifier settings.\r\n             *\r\n             * @param {string} key The setting name\r\n             * @param {Variant} value The setting value.\r\n             *\r\n             * @return {Object}\tif the called as a setter, return the notifier instance.\r\n             */\r\n            setting: function (key, value) {\r\n                //ensure init\r\n                initialize(this);\r\n\r\n                if (typeof value === 'undefined') {\r\n                    //get\r\n                    return this.__internal[key];\r\n                } else {\r\n                    //set\r\n                    switch (key) {\r\n                    case 'position':\r\n                        this.__internal.position = value;\r\n                        updatePosition(this);\r\n                        break;\r\n                    case 'delay':\r\n                        this.__internal.delay = value;\r\n                        break;\r\n                    }\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * [Alias] Sets dialog settings/options\r\n             */\r\n            set:function(key,value){\r\n                this.setting(key,value);\r\n                return this;\r\n            },\r\n            /**\r\n             * [Alias] Gets dialog settings/options\r\n             */\r\n            get:function(key){\r\n                return this.setting(key);\r\n            },\r\n            /**\r\n             * Creates a new notification message\r\n             *\r\n             * @param {string} type The type of notification message (simply a CSS class name 'ajs-{type}' to be added).\r\n             * @param {Function} callback  A callback function to be invoked when the message is dismissed.\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            create: function (type, callback) {\r\n                //ensure notifier init\r\n                initialize(this);\r\n                //create new notification message\r\n                var div = document.createElement('div');\r\n                div.className = classes.message + ((typeof type === 'string' && type !== '') ? ' ' + classes.prefix + type : '');\r\n                return create(div, callback);\r\n            },\r\n            /**\r\n             * Dismisses all open notifications.\r\n             *\r\n             * @param {Object} excpet [optional] The notification object to exclude from dismissal.\r\n             *\r\n             */\r\n            dismissAll: function (except) {\r\n                var clone = openInstances.slice(0);\r\n                for (var x = 0; x < clone.length; x += 1) {\r\n                    var  instance = clone[x];\r\n                    if (except === undefined || except !== instance) {\r\n                        instance.dismiss();\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    })();\r\n\r\n    /**\r\n     * Alertify public API\r\n     * This contains everything that is exposed through the alertify object.\r\n     *\r\n     * @return {Object}\r\n     */\r\n    function Alertify() {\r\n\r\n        // holds a references of created dialogs\r\n        var dialogs = {};\r\n\r\n        /**\r\n         * Extends a given prototype by merging properties from base into sub.\r\n         *\r\n         * @sub {Object} sub The prototype being overwritten.\r\n         * @base {Object} base The prototype being written.\r\n         *\r\n         * @return {Object} The extended prototype.\r\n         */\r\n        function extend(sub, base) {\r\n            // copy dialog pototype over definition.\r\n            for (var prop in base) {\r\n                if (base.hasOwnProperty(prop)) {\r\n                    sub[prop] = base[prop];\r\n                }\r\n            }\r\n            return sub;\r\n        }\r\n\r\n\r\n        /**\r\n        * Helper: returns a dialog instance from saved dialogs.\r\n        * and initializes the dialog if its not already initialized.\r\n        *\r\n        * @name {String} name The dialog name.\r\n        *\r\n        * @return {Object} The dialog instance.\r\n        */\r\n        function get_dialog(name) {\r\n            var dialog = dialogs[name].dialog;\r\n            //initialize the dialog if its not already initialized.\r\n            if (dialog && typeof dialog.__init === 'function') {\r\n                dialog.__init(dialog);\r\n            }\r\n            return dialog;\r\n        }\r\n\r\n        /**\r\n         * Helper:  registers a new dialog definition.\r\n         *\r\n         * @name {String} name The dialog name.\r\n         * @Factory {Function} Factory a function resposible for creating dialog prototype.\r\n         * @transient {Boolean} transient True to create a new dialog instance each time the dialog is invoked, false otherwise.\r\n         * @base {String} base the name of another dialog to inherit from.\r\n         *\r\n         * @return {Object} The dialog definition.\r\n         */\r\n        function register(name, Factory, transient, base) {\r\n            var definition = {\r\n                dialog: null,\r\n                factory: Factory\r\n            };\r\n\r\n            //if this is based on an existing dialog, create a new definition\r\n            //by applying the new protoype over the existing one.\r\n            if (base !== undefined) {\r\n                definition.factory = function () {\r\n                    return extend(new dialogs[base].factory(), new Factory());\r\n                };\r\n            }\r\n\r\n            if (!transient) {\r\n                //create a new definition based on dialog\r\n                definition.dialog = extend(new definition.factory(), dialog);\r\n            }\r\n            return dialogs[name] = definition;\r\n        }\r\n\r\n        return {\r\n            /**\r\n             * Alertify defaults\r\n             * \r\n             * @type {Object}\r\n             */\r\n            defaults: defaults,\r\n            /**\r\n             * Dialogs factory \r\n             *\r\n             * @param {string}      Dialog name.\r\n             * @param {Function}    A Dialog factory function.\r\n             * @param {Boolean}     Indicates whether to create a singleton or transient dialog.\r\n             * @param {String}      The name of the base type to inherit from.\r\n             */\r\n            dialog: function (name, Factory, transient, base) {\r\n\r\n                // get request, create a new instance and return it.\r\n                if (typeof Factory !== 'function') {\r\n                    return get_dialog(name);\r\n                }\r\n\r\n                if (this.hasOwnProperty(name)) {\r\n                    throw new Error('alertify.dialog: name already exists');\r\n                }\r\n\r\n                // register the dialog\r\n                var definition = register(name, Factory, transient, base);\r\n\r\n                if (transient) {\r\n\r\n                    // make it public\r\n                    this[name] = function () {\r\n                        //if passed with no params, consider it a get request\r\n                        if (arguments.length === 0) {\r\n                            return definition.dialog;\r\n                        } else {\r\n                            var instance = extend(new definition.factory(), dialog);\r\n                            //ensure init\r\n                            if (instance && typeof instance.__init === 'function') {\r\n                                instance.__init(instance);\r\n                            }\r\n                            instance['main'].apply(instance, arguments);\r\n                            return instance['show'].apply(instance);\r\n                        }\r\n                    };\r\n                } else {\r\n                    // make it public\r\n                    this[name] = function () {\r\n                        //ensure init\r\n                        if (definition.dialog && typeof definition.dialog.__init === 'function') {\r\n                            definition.dialog.__init(definition.dialog);\r\n                        }\r\n                        //if passed with no params, consider it a get request\r\n                        if (arguments.length === 0) {\r\n                            return definition.dialog;\r\n                        } else {\r\n                            var dialog = definition.dialog;\r\n                            dialog['main'].apply(definition.dialog, arguments);\r\n                            return dialog['show'].apply(definition.dialog);\r\n                        }\r\n                    };\r\n                }\r\n            },\r\n            /**\r\n             * Close all open dialogs.\r\n             *\r\n             * @param {Object} excpet [optional] The dialog object to exclude from closing.\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            closeAll: function (except) {\r\n                var clone = openDialogs.slice(0);\r\n                for (var x = 0; x < clone.length; x += 1) {\r\n                    var instance = clone[x];\r\n                    if (except === undefined || except !== instance) {\r\n                        instance.close();\r\n                    }\r\n                }\r\n            },\r\n            /**\r\n             * Gets or Sets dialog settings/options. if the dialog is transient, this call does nothing.\r\n             *\r\n             * @param {string} name The dialog name.\r\n             * @param {String|Object} key A string specifying a propery name or a collection of key/value pairs.\r\n             * @param {Variant} value Optional, the value associated with the key (in case it was a string).\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            setting: function (name, key, value) {\r\n\r\n                if (name === 'notifier') {\r\n                    return notifier.setting(key, value);\r\n                }\r\n\r\n                var dialog = get_dialog(name);\r\n                if (dialog) {\r\n                    return dialog.setting(key, value);\r\n                }\r\n            },\r\n            /**\r\n             * [Alias] Sets dialog settings/options \r\n             */\r\n            set: function(name,key,value){\r\n                return this.setting(name, key,value);\r\n            },\r\n            /**\r\n             * [Alias] Gets dialog settings/options \r\n             */\r\n            get: function(name, key){\r\n                return this.setting(name, key);\r\n            },\r\n            /**\r\n             * Creates a new notification message.\r\n             * If a type is passed, a class name \"ajs-{type}\" will be added.\r\n             * This allows for custom look and feel for various types of notifications.\r\n             *\r\n             * @param  {String | DOMElement}    [message=undefined]\t\tMessage text\r\n             * @param  {String}                 [type='']\t\t\t\tType of log message\r\n             * @param  {String}                 [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}               [callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            notify: function (message, type, wait, callback) {\r\n                return notifier.create(type, callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Creates a new notification message.\r\n             *\r\n             * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n             * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            message: function (message, wait, callback) {\r\n                return notifier.create(null, callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Creates a new notification message of type 'success'.\r\n             *\r\n             * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n             * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            success: function (message, wait, callback) {\r\n                return notifier.create('success', callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Creates a new notification message of type 'error'.\r\n             *\r\n             * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n             * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            error: function (message, wait, callback) {\r\n                return notifier.create('error', callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Creates a new notification message of type 'warning'.\r\n             *\r\n             * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n             * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            warning: function (message, wait, callback) {\r\n                return notifier.create('warning', callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Dismisses all open notifications\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            dismissAll: function () {\r\n                notifier.dismissAll();\r\n            }\r\n        };\r\n    }\r\n    var alertify = new Alertify();\r\n\r\n    /**\r\n    * Alert dialog definition\r\n    *\r\n    * invoked by:\r\n    *\talertify.alert(message);\r\n    *\talertify.alert(title, message);\r\n    *\talertify.alert(message, onok);\r\n    *\talertify.alert(title, message, onok);\r\n     */\r\n    alertify.dialog('alert', function () {\r\n        return {\r\n            main: function (_title, _message, _onok) {\r\n                var title, message, onok;\r\n                switch (arguments.length) {\r\n                case 1:\r\n                    message = _title;\r\n                    break;\r\n                case 2:\r\n                    if (typeof _message === 'function') {\r\n                        message = _title;\r\n                        onok = _message;\r\n                    } else {\r\n                        title = _title;\r\n                        message = _message;\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    title = _title;\r\n                    message = _message;\r\n                    onok = _onok;\r\n                    break;\r\n                }\r\n                this.set('title', title);\r\n                this.set('message', message);\r\n                this.set('onok', onok);\r\n                return this;\r\n            },\r\n            setup: function () {\r\n                return {\r\n                    buttons: [\r\n                        {\r\n                            text: alertify.defaults.glossary.ok,\r\n                            key: keys.ESC,\r\n                            invokeOnClose: true,\r\n                            className: alertify.defaults.theme.ok,\r\n                        }\r\n                    ],\r\n                    focus: {\r\n                        element: 0,\r\n                        select: false\r\n                    },\r\n                    options: {\r\n                        maximizable: false,\r\n                        resizable: false\r\n                    }\r\n                };\r\n            },\r\n            build: function () {\r\n                // nothing\r\n            },\r\n            prepare: function () {\r\n                //nothing\r\n            },\r\n            setMessage: function (message) {\r\n                this.setContent(message);\r\n            },\r\n            settings: {\r\n                message: undefined,\r\n                onok: undefined,\r\n                label: undefined,\r\n            },\r\n            settingUpdated: function (key, oldValue, newValue) {\r\n                switch (key) {\r\n                case 'message':\r\n                    this.setMessage(newValue);\r\n                    break;\r\n                case 'label':\r\n                    if (this.__internal.buttons[0].element) {\r\n                        this.__internal.buttons[0].element.innerHTML = newValue;\r\n                    }\r\n                    break;\r\n                }\r\n            },\r\n            callback: function (closeEvent) {\r\n                if (typeof this.get('onok') === 'function') {\r\n                    var returnValue = this.get('onok').call(this, closeEvent);\r\n                    if (typeof returnValue !== 'undefined') {\r\n                        closeEvent.cancel = !returnValue;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    });\r\n    /**\r\n     * Confirm dialog object\r\n     *\r\n     *\talertify.confirm(message);\r\n     *\talertify.confirm(message, onok);\r\n     *\talertify.confirm(message, onok, oncancel);\r\n     *\talertify.confirm(title, message, onok, oncancel);\r\n     */\r\n    alertify.dialog('confirm', function () {\r\n\r\n        var autoConfirm = {\r\n            timer: null,\r\n            index: null,\r\n            text: null,\r\n            duration: null,\r\n            task: function (event, self) {\r\n                if (self.isOpen()) {\r\n                    self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text + ' (&#8207;' + autoConfirm.duration + '&#8207;) ';\r\n                    autoConfirm.duration -= 1;\r\n                    if (autoConfirm.duration === -1) {\r\n                        clearAutoConfirm(self);\r\n                        var button = self.__internal.buttons[autoConfirm.index];\r\n                        var closeEvent = createCloseEvent(autoConfirm.index, button);\r\n\r\n                        if (typeof self.callback === 'function') {\r\n                            self.callback.apply(self, [closeEvent]);\r\n                        }\r\n                        //close the dialog.\r\n                        if (closeEvent.close !== false) {\r\n                            self.close();\r\n                        }\r\n                    }\r\n                } else {\r\n                    clearAutoConfirm(self);\r\n                }\r\n            }\r\n        };\r\n\r\n        function clearAutoConfirm(self) {\r\n            if (autoConfirm.timer !== null) {\r\n                clearInterval(autoConfirm.timer);\r\n                autoConfirm.timer = null;\r\n                self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text;\r\n            }\r\n        }\r\n\r\n        function startAutoConfirm(self, index, duration) {\r\n            clearAutoConfirm(self);\r\n            autoConfirm.duration = duration;\r\n            autoConfirm.index = index;\r\n            autoConfirm.text = self.__internal.buttons[index].element.innerHTML;\r\n            autoConfirm.timer = setInterval(delegate(self, autoConfirm.task), 1000);\r\n            autoConfirm.task(null, self);\r\n        }\r\n\r\n\r\n        return {\r\n            main: function (_title, _message, _onok, _oncancel) {\r\n                var title, message, onok, oncancel;\r\n                switch (arguments.length) {\r\n                case 1:\r\n                    message = _title;\r\n                    break;\r\n                case 2:\r\n                    message = _title;\r\n                    onok = _message;\r\n                    break;\r\n                case 3:\r\n                    message = _title;\r\n                    onok = _message;\r\n                    oncancel = _onok;\r\n                    break;\r\n                case 4:\r\n                    title = _title;\r\n                    message = _message;\r\n                    onok = _onok;\r\n                    oncancel = _oncancel;\r\n                    break;\r\n                }\r\n                this.set('title', title);\r\n                this.set('message', message);\r\n                this.set('onok', onok);\r\n                this.set('oncancel', oncancel);\r\n                return this;\r\n            },\r\n            setup: function () {\r\n                return {\r\n                    buttons: [\r\n                        {\r\n                            text: alertify.defaults.glossary.ok,\r\n                            key: keys.ENTER,\r\n                            className: alertify.defaults.theme.ok,\r\n                        },\r\n                        {\r\n                            text: alertify.defaults.glossary.cancel,\r\n                            key: keys.ESC,\r\n                            invokeOnClose: true,\r\n                            className: alertify.defaults.theme.cancel,\r\n                        }\r\n                    ],\r\n                    focus: {\r\n                        element: 0,\r\n                        select: false\r\n                    },\r\n                    options: {\r\n                        maximizable: false,\r\n                        resizable: false\r\n                    }\r\n                };\r\n            },\r\n            build: function () {\r\n                //nothing\r\n            },\r\n            prepare: function () {\r\n                //nothing\r\n            },\r\n            setMessage: function (message) {\r\n                this.setContent(message);\r\n            },\r\n            settings: {\r\n                message: null,\r\n                labels: null,\r\n                onok: null,\r\n                oncancel: null,\r\n                defaultFocus: null,\r\n                reverseButtons: null,\r\n            },\r\n            settingUpdated: function (key, oldValue, newValue) {\r\n                switch (key) {\r\n                case 'message':\r\n                    this.setMessage(newValue);\r\n                    break;\r\n                case 'labels':\r\n                    if ('ok' in newValue && this.__internal.buttons[0].element) {\r\n                        this.__internal.buttons[0].text = newValue.ok;\r\n                        this.__internal.buttons[0].element.innerHTML = newValue.ok;\r\n                    }\r\n                    if ('cancel' in newValue && this.__internal.buttons[1].element) {\r\n                        this.__internal.buttons[1].text = newValue.cancel;\r\n                        this.__internal.buttons[1].element.innerHTML = newValue.cancel;\r\n                    }\r\n                    break;\r\n                case 'reverseButtons':\r\n                    if (newValue === true) {\r\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);\r\n                    } else {\r\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);\r\n                    }\r\n                    break;\r\n                case 'defaultFocus':\r\n                    this.__internal.focus.element = newValue === 'ok' ? 0 : 1;\r\n                    break;\r\n                }\r\n            },\r\n            callback: function (closeEvent) {\r\n                clearAutoConfirm(this);\r\n                var returnValue;\r\n                switch (closeEvent.index) {\r\n                case 0:\r\n                    if (typeof this.get('onok') === 'function') {\r\n                        returnValue = this.get('onok').call(this, closeEvent);\r\n                        if (typeof returnValue !== 'undefined') {\r\n                            closeEvent.cancel = !returnValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 1:\r\n                    if (typeof this.get('oncancel') === 'function') {\r\n                        returnValue = this.get('oncancel').call(this, closeEvent);\r\n                        if (typeof returnValue !== 'undefined') {\r\n                            closeEvent.cancel = !returnValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            },\r\n            autoOk: function (duration) {\r\n                startAutoConfirm(this, 0, duration);\r\n                return this;\r\n            },\r\n            autoCancel: function (duration) {\r\n                startAutoConfirm(this, 1, duration);\r\n                return this;\r\n            }\r\n        };\r\n    });\r\n    /**\r\n     * Prompt dialog object\r\n     *\r\n     * invoked by:\r\n     *\talertify.prompt(message);\r\n     *\talertify.prompt(message, value);\r\n     *\talertify.prompt(message, value, onok);\r\n     *\talertify.prompt(message, value, onok, oncancel);\r\n     *\talertify.prompt(title, message, value, onok, oncancel);\r\n     */\r\n    alertify.dialog('prompt', function () {\r\n        var input = document.createElement('INPUT');\r\n        var p = document.createElement('P');\r\n        return {\r\n            main: function (_title, _message, _value, _onok, _oncancel) {\r\n                var title, message, value, onok, oncancel;\r\n                switch (arguments.length) {\r\n                case 1:\r\n                    message = _title;\r\n                    break;\r\n                case 2:\r\n                    message = _title;\r\n                    value = _message;\r\n                    break;\r\n                case 3:\r\n                    message = _title;\r\n                    value = _message;\r\n                    onok = _value;\r\n                    break;\r\n                case 4:\r\n                    message = _title;\r\n                    value = _message;\r\n                    onok = _value;\r\n                    oncancel = _onok;\r\n                    break;\r\n                case 5:\r\n                    title = _title;\r\n                    message = _message;\r\n                    value = _value;\r\n                    onok = _onok;\r\n                    oncancel = _oncancel;\r\n                    break;\r\n                }\r\n                this.set('title', title);\r\n                this.set('message', message);\r\n                this.set('value', value);\r\n                this.set('onok', onok);\r\n                this.set('oncancel', oncancel);\r\n                return this;\r\n            },\r\n            setup: function () {\r\n                return {\r\n                    buttons: [\r\n                        {\r\n                            text: alertify.defaults.glossary.ok,\r\n                            key: keys.ENTER,\r\n                            className: alertify.defaults.theme.ok,\r\n                        },\r\n                        {\r\n                            text: alertify.defaults.glossary.cancel,\r\n                            key: keys.ESC,\r\n                            invokeOnClose: true,\r\n                            className: alertify.defaults.theme.cancel,\r\n                        }\r\n                    ],\r\n                    focus: {\r\n                        element: input,\r\n                        select: true\r\n                    },\r\n                    options: {\r\n                        maximizable: false,\r\n                        resizable: false\r\n                    }\r\n                };\r\n            },\r\n            build: function () {\r\n                input.className = alertify.defaults.theme.input;\r\n                input.setAttribute('type', 'text');\r\n                input.value = this.get('value');\r\n                this.elements.content.appendChild(p);\r\n                this.elements.content.appendChild(input);\r\n            },\r\n            prepare: function () {\r\n                //nothing\r\n            },\r\n            setMessage: function (message) {\r\n                if (typeof message === 'string') {\r\n                    clearContents(p);\r\n                    p.innerHTML = message;\r\n                } else if (message instanceof window.HTMLElement && p.firstChild !== message) {\r\n                    clearContents(p);\r\n                    p.appendChild(message);\r\n                }\r\n            },\r\n            settings: {\r\n                message: undefined,\r\n                labels: undefined,\r\n                onok: undefined,\r\n                oncancel: undefined,\r\n                value: '',\r\n                type:'text',\r\n                reverseButtons: undefined,\r\n            },\r\n            settingUpdated: function (key, oldValue, newValue) {\r\n                switch (key) {\r\n                case 'message':\r\n                    this.setMessage(newValue);\r\n                    break;\r\n                case 'value':\r\n                    input.value = newValue;\r\n                    break;\r\n                case 'type':\r\n                    switch (newValue) {\r\n                    case 'text':\r\n                    case 'color':\r\n                    case 'date':\r\n                    case 'datetime-local':\r\n                    case 'email':\r\n                    case 'month':\r\n                    case 'number':\r\n                    case 'password':\r\n                    case 'search':\r\n                    case 'tel':\r\n                    case 'time':\r\n                    case 'week':\r\n                        input.type = newValue;\r\n                        break;\r\n                    default:\r\n                        input.type = 'text';\r\n                        break;\r\n                    }\r\n                    break;\r\n                case 'labels':\r\n                    if (newValue.ok && this.__internal.buttons[0].element) {\r\n                        this.__internal.buttons[0].element.innerHTML = newValue.ok;\r\n                    }\r\n                    if (newValue.cancel && this.__internal.buttons[1].element) {\r\n                        this.__internal.buttons[1].element.innerHTML = newValue.cancel;\r\n                    }\r\n                    break;\r\n                case 'reverseButtons':\r\n                    if (newValue === true) {\r\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);\r\n                    } else {\r\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);\r\n                    }\r\n                    break;\r\n                }\r\n            },\r\n            callback: function (closeEvent) {\r\n                var returnValue;\r\n                switch (closeEvent.index) {\r\n                case 0:\r\n                    this.settings.value = input.value;\r\n                    if (typeof this.get('onok') === 'function') {\r\n                        returnValue = this.get('onok').call(this, closeEvent, this.settings.value);\r\n                        if (typeof returnValue !== 'undefined') {\r\n                            closeEvent.cancel = !returnValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 1:\r\n                    if (typeof this.get('oncancel') === 'function') {\r\n                        returnValue = this.get('oncancel').call(this, closeEvent);\r\n                        if (typeof returnValue !== 'undefined') {\r\n                            closeEvent.cancel = !returnValue;\r\n                        }\r\n                    }\r\n                    if(!closeEvent.cancel){\r\n                        input.value = this.settings.value;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n    });\r\n\r\n    // CommonJS\r\n    if ( typeof module === 'object' && typeof module.exports === 'object' ) {\r\n        module.exports = alertify;\r\n    // AMD\r\n    } else if ( typeof define === 'function' && define.amd) {\r\n        define( [], function () {\r\n            return alertify;\r\n        } );\r\n    // window\r\n    } else if ( !window.alertify ) {\r\n        window.alertify = alertify;\r\n    }\r\n\r\n} ( typeof window !== 'undefined' ? window : this ) );\r\n"],"names":["window","NOT_DISABLED_NOT_RESET","keys","defaults","autoReset","basic","closable","closableByDimmer","invokeOnCloseOff","frameless","defaultFocusOff","maintainFocus","maximizable","modal","movable","moveBounded","overflow","padding","pinnable","pinned","preventBodyShift","resizable","startMaximized","transition","transitionOff","tabbable","join","notifier","delay","position","closeButton","classes","base","prefix","message","top","right","bottom","left","center","visible","hidden","close","glossary","title","ok","cancel","acccpt","deny","confirm","decline","maximize","restore","theme","input","hooks","preinit","postinit","openDialogs","addClass","element","classNames","className","removeClass","original","split","toBeRemoved","x","length","index","indexOf","splice","isRightToLeft","getComputedStyle","document","body","direction","getScrollTop","documentElement","scrollTop","getScrollLeft","scrollLeft","clearContents","lastChild","removeChild","copy","src","cpy","Array","isArray","push","Date","getTime","RegExp","source","global","ignoreCase","multiline","lastIndex","prop","hasOwnProperty","destruct","instance","initialize","elements","root","parentNode","settings","__settings","__init","__internal","IsPassiveSupported","options","Object","defineProperty","get","addEventListener","removeEventListener","e","on","el","event","fn","useCapture","passive","capture","off","t","type","supported","transitions","animation","OAnimation","msAnimation","MozAnimation","WebkitAnimation","undefined","style","delegate","context","method","arguments","args","apply","createCloseEvent","button","dispatchEvent","eventType","call","dialog","scrollX","scrollY","usedKeys","tabindex","isSafari","navigator","userAgent","templates","buttons","primary","auxiliary","setup","alertify","focus","select","buttonsDefinition","b","ref","i","internal","isOpen","activeElement","timerIn","timerOut","onshow","onclosing","onclose","onfocus","onmove","onmoved","onresize","onresized","onmaximize","onmaximized","onrestore","onrestored","resetHandler","beginMoveHandler","beginResizeHandler","bringToFrontHandler","modalClickHandler","buttonsClickHandler","commandsClickHandler","transitionInHandler","transitionOutHandler","destroy","createElement","display","innerHTML","dimmer","firstChild","reset","commands","container","nextSibling","pin","header","content","footer","resizeHandle","buttonTemplate","key","cloneNode","text","attrs","setAttribute","scope","appendChild","opKey","onReset","beginMove","beginResize","bringToFront","handleTransitionInEvent","handleTransitionOutEvent","set","build","restoreScrollPosition","scrollTo","ensureNoOverflow","requiresNoOverflow","isModal","isMaximized","topScroll","add","scrollHeight","clientHeight","setFocus","optionUpdated","option","oldValue","newValue","setHeader","unbindModelessEvents","updateAbsPositionFix","bindModelessEvents","updateDisplayMode","updateBasicMode","updateFramelessMode","removeAbsPositionFix","addAbsPositionFix","updatePinned","bindClosableEvents","unbindClosableEvents","updateClosable","updateMaximizable","updatePinnable","bindMovableEvents","resetMove","unbindMovableEvents","updateMovable","bindResizableEvents","resetResize","unbindResizableEvents","updateResizable","value","offsetWidth","updateTransition","updateTransitionOff","onupdate","update","obj","callback","old","result","op","items","found","Error","triggerClose","triggerCallback","invokeOnClose","srcElement","target","isPinned","unpin","marginTop","marginLeft","marginRight","parseInt","cancelClick","modalClickHandlerTS","timeStamp","callbackTS","cancelKeyup","check","now","idx","disabled","closeEvent","keyupHandler","keyCode","keydownHandler","preventDefault","stopPropagation","resetTarget","querySelector","firstReset","lastReset","lastFocusedElement","relatedTarget","within","contains","findTabbable","last","tabbables","slice","querySelectorAll","reverse","offsetParent","offsetHeight","getClientRects","recycleTab","shiftKey","clearTimeout","offsetX","offsetY","xProp","yProp","bounds","refreshTop","moveDelegate","moveElement","moveElementBounded","Math","min","maxLeft","max","minLeft","maxTop","minTop","eventSrc","targetTouches","current","offsetLeft","offsetTop","move","endMove","startingLeft","Number","Nan","startingWidth","minWidth","handleOffset","height","minHeight","width","maxWidth","resize","pageRelative","X","Y","pageX","pageY","clientX","clientY","isRTL","isNaN","diff","abs","resizeElement","endResize","windowResize","this","moveTo","y","resizeTo","w","parseFloat","h","regex","match","clientWidth","setting","self","k","o","n","settingUpdated","item","HTMLElement","setContent","showModal","show","setTimeout","hasAttribute","prepare","removeAttribute","closeOthers","closeAll","openInstances","baseClass","updatePosition","pushInstance","pushed","create","div","clickDelegate","getAttribute","dismiss","transitionDone","clearTimers","timer","transitionTimeout","_content","_wait","wait","insertBefore","clickHandler","ondismiss","clicked","transitionEndHandler","dismissOthers","dismissAll","except","clone","dialogs","extend","sub","get_dialog","name","Factory","transient","definition","factory","register","notify","success","error","warning","main","_title","_message","_onok","onok","setMessage","label","returnValue","autoConfirm","duration","task","clearAutoConfirm","clearInterval","startAutoConfirm","setInterval","_oncancel","oncancel","labels","defaultFocus","reverseButtons","autoOk","autoCancel","p","_value","$b2e2b4565fa69be771257f6f3191d910$exports"],"version":3,"file":"saque.dee5e5a7.js.map"}